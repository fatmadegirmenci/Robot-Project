package robotprojesi;

import java.util.Scanner;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.swing.JFrame.EXIT_ON_CLOSE;
import java.awt.Color;
import java.awt.Graphics;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;


public interface Robot {
    public void toplamSureHesaplama(); 
     int [] dizisag = new int [10];
     int [] dizisol = new int [10];
     int [] diziyukari = new int [10];
     int [] diziasagi = new int [10];
}

public abstract class GezginRobotlar implements Robot {
    int motorSayisi, yukMiktari;
    String robotTipi,yon;
    
    float gezinmeHizi,gezinmeSuresi;
    int  z, t, i, j=0, j1=0, j2=0,j3=0,k,sayac1=0,sayac2=0,c=0;
    float a=0;
    public abstract float EngelGecmeSuresiBul();
    public abstract void hedefeUlasildiMi();
     //ArrayList <String> yonAdlari = new ArrayList <String> ();
    IzgaraCizimi nesne = new IzgaraCizimi();
    int b,d,b1,d1,b2,d2,engelSayisi;
    void robotunBaslangicNoktasý(int x,int y,int z){
        b=x;
        b1=x;
        d=y;
        d1=y;
        engelSayisi=z;
    }
    int [] engeller = new int [engelSayisi];
    
    void engelKoordinatlarý(int [] dizi){
        engeller = dizi;
    }
    
}

public interface ManipulatorRobotlar extends Robot{
    public void yukKapasitesiHesaaplama();
    public void yukTasýnýmý();
    public String yonSir(int i); 
     
}

public class GezginManipulatorRobotlar extends GezginRobotlar implements ManipulatorRobotlar {
    Scanner keyboard = new Scanner(System.in);
    int motorSayisi, yukMiktari;
    String robotTipi,hareketli,hareketsiz,sabit;
    int sabitlenmeSuresi, gecisSuresi;
    int tekerlekSayisi;
    int yukTasKapasite;
    int robotKoluUzunlugu;
    float tasimaSuresi,tasimaHizi;
    int sayac11=0,sayac3;
    int [] dizisag1 = new int [10];
    int [] dizisol1 = new int [10];
    int [] diziasagi1 = new int [10];
    int [] diziyukari1 = new int [10];
    
    String [] yonSiralamasi;
    int yonSayisi = 0;
    
    ArrayList <String> yonAdlari = new ArrayList <String> ();
    
    int yonSayisi2 = 0;
    String [] yonSiralamasi2;
    ArrayList <String> yonAdlari2 = new ArrayList <String> ();
    
    public GezginManipulatorRobotlar(String robotTipi,String hareketli, String hareketsiz, int motorSayisi, int yukMiktari, int gezinmeHizi, int tekerlekSayisi, int bacakSayisi, int paletSayisi,int robotKoluUzunlugu,int yukTasKapasite,int tasimaHizi) { // tum ozelliklerin bulundugu constructor
        //super( robotTipi, motorSayisi, yukMiktari, gezinmeHizi, tekerlekSayisi);
        this.hareketli = hareketli;
        this.hareketsiz = hareketsiz;
        this.robotTipi = robotTipi;
        this.motorSayisi = motorSayisi;
        this.yukMiktari = yukMiktari;
        this.gezinmeHizi = gezinmeHizi;
        this.tekerlekSayisi = tekerlekSayisi;
        this.gecisSuresi = gecisSuresi;
        this.robotKoluUzunlugu = robotKoluUzunlugu;
        this.yukTasKapasite = yukTasKapasite;
        this.tasimaHizi = tasimaHizi;
    }
     
     @Override
    public void yukKapasitesiHesaaplama() {
        if(yukMiktari > yukTasKapasite){
            System.out.println(" yuk miktari yuk kapasitesinden fazla. Tasiyamaz !. Yuk miktarini yeniden giriniz :");
            this.yukMiktari = keyboard.nextInt();
        }
    }
    
    @Override
    public void hedefeUlasildiMi(){
        if("Tekerlekli".equals(hareketli) || "Paletli".equals(hareketli)){
           j=0;
        j1=0;
        j2=0;
        j3=0;
        sayac1 = 0;
        sayac2 = 0;
        sayac3=0;
        c=0;
        while(c != -1){
            System.out.println("Hangi yone ilerleyeceksiniz : ");
            yon = keyboard.next();
            
            yonSayisi++;
            yonAdlari.add(yon);
            
            if("sag".equals(yon)){
                System.out.println("saga kac birim ilerleyeceksiniz : ");
                dizisag[j] = keyboard.nextInt();
                b += dizisag[j];
                
                for(k=0;k<2*engelSayisi;k+=2){
                    for(i=b1+1 ; i<=b ; i++){
                        if(engeller[k] == i && engeller[k+1] == d1)
                            sayac1++;  
                    }
                }
            
                if(b > 20){
                    b -= dizisag[j];
                    dizisag[j] = 20-b;
                    b += dizisag[j];
                    System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                    sayac2 += b-b1;
                    b1 = b;
                    j++;
                    sayac3++;
                    break;
                }
               
                sayac2 += b-b1;
                b1 = b;
                j++;
            }
            if("sol".equals(yon)){
                System.out.println("sola kac birim ilerleyeceksiniz : ");
                dizisol[j1] = keyboard.nextInt();
                b -= dizisol[j1];
                
                for(k=0;k<2*engelSayisi;k+=2){
                    for(i=b ; i<=b1-1 ; i++){
                        if(engeller[k] == i && engeller[k+1] == d1)
                            sayac1++;  
                    }
                }
                
                if(b <= 0){
                    b += dizisol[j1];
                    dizisol[j1] = b-1;
                    b -= dizisol[j1];
                    System.out.println("izzgaradan ciktiniz.Program sonlandirilacak : ");
                    sayac2 += b1-b;
                    b1 = b;
                    j1++;
                    sayac3++;
                    break;
                }
                
                sayac2 += b1-b;
                b1 = b;
                j1++;
            }
            if("yukari".equals(yon)){
                System.out.println("yukari kac birim ilerleyeceksiniz : ");
                diziyukari[j2] = keyboard.nextInt();
                d -= diziyukari[j2];
                
                for(k=0;k<2*engelSayisi;k+=2){
                    for(i=d ; i<=d1-1 ; i++){
                        if(engeller[k] == b1 && engeller[k+1] == i)
                            sayac1++;  
                    }
                }
                
                if(d <= 0){
                    d += diziyukari[j2];
                        diziyukari[j2] = d-1;
                        d -= diziyukari[j2];
                        System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                        sayac2 += d1-d;
                        d1 = d;
                        j2++;
                        sayac3++;
                        break;
                }
                
                sayac2 += d1-d;
                d1 = d;
                j2++;
            }  
            if("asagi".equals(yon)){
                System.out.println("asagi kac birim ilerleyeceksiniz : ");
                diziasagi[j3] = keyboard.nextInt();
                d += diziasagi[j3];
                
                for(k=0;k<2*engelSayisi;k+=2){
                    for(i=d1+1 ; i<=d ; i++){
                        if(engeller[k] == b1 && engeller[k+1] == i)
                            sayac1++;  
                    }
                }
                
                if(d > 20){
                    d -= diziasagi[j3];
                    diziasagi[j3] = 20-d;
                    d += diziasagi[j3];
                    System.out.println("izggaradan ciktiniz.Program sonlandirilacak : ");
                    sayac2 += d-d1;
                    d1 = d;
                    j3++;
                    sayac3++;
                    break;
                }
                
                sayac2 += d-d1;
                d1 = d;
                j3++;
            }
            System.out.println("hedefe ulasildi ise -1 giriniz : ");
            c = keyboard.nextInt();
            
        }
        sayac2 -=sayac1;
        
        
        yonSiralamasi = new String[yonSayisi];
        for(int t=0; t<yonAdlari.size(); t++) {
            yonSiralamasi[t] = yonAdlari.get(t);
        } 
        }
        else if("Spider".equals(hareketli)){
            j=0;
            j1=0;
            j2=0;
            j3=0;
            sayac1 = 0;
            sayac2 = 0;
            sayac3=0;
           c=0;
            while(c != -1){
                System.out.println("Hangi yone ilerleyeceksiniz : ");
                yon = keyboard.next();
            
                yonSayisi++;
                yonAdlari.add(yon);
            
                if("sag".equals(yon)){
                    System.out.println("saga kac birim ilerleyeceksiniz : ");
                    dizisag[j] = keyboard.nextInt();
                    b += dizisag[j];
                
                    for(k=0;k<2*engelSayisi;k+=2){
                        for(i=b1+1 ; i<=b ; i++){
                            if(engeller[k] == i && engeller[k+1] == d1){
                                sayac1++;  
                                b -= dizisag[j];
                                dizisag[j] = i-b1-1;
                                b += dizisag[j];
                                sayac3++;
                            }
                        }
                    }
            
                    if(b > 20){
                        b -= dizisag[j];
                        dizisag[j] = 20-b;
                        b += dizisag[j];
                        System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                        sayac2 += b-b1;
                        b1 = b;
                        j++;
                        sayac3++;
                        break;
                    }
               
                    sayac2 += b-b1;
                    b1 = b;
                    j++;
                    if(sayac1 != 0){
                        System.out.println("Spider Robot engelden gecemeyecegi icin program sonlandirildi.");
                        break;
                    }
                }
                if("sol".equals(yon)){
                    System.out.println("sola kac birim ilerleyeceksiniz : ");
                    dizisol[j1] = keyboard.nextInt();
                    b -= dizisol[j1];
                
                    for(k=0;k<2*engelSayisi;k+=2){
                        for(i=b ; i<=b1-1 ; i++){
                            if(engeller[k] == i && engeller[k+1] == d1){
                                sayac1++;  
                                b += dizisol[j1];
                                dizisol[j1] = b1-1-i;
                                b -= dizisol[j1];
                                sayac3++;
                            }
                        }
                    }
                
                    if(b <= 0){
                        b += dizisol[j1];
                        dizisol[j1] = b-1;
                        b -= dizisol[j1];
                        System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                        sayac2 += b1-b;
                        b1 = b;
                        j1++;
                        sayac3++;
                        break;
                    }
                
                    sayac2 += b1-b;
                    b1 = b;
                    j1++;
                    if(sayac1 != 0){
                        System.out.println("Spider Robot engelden gecemeyecegi icin program sonlandirildi.");
                        break;
                    }
                }
                if("yukari".equals(yon)){
                    System.out.println("yukari kac birim ilerleyeceksiniz : ");
                    diziyukari[j2] = keyboard.nextInt();
                    d -= diziyukari[j2];
                
                    for(k=0;k<2*engelSayisi;k+=2){
                        for(i=d ; i<=d1-1 ; i++){
                            if(engeller[k] == b1 && engeller[k+1] == i){
                                sayac1++;  
                                d += diziyukari[j2];
                                diziyukari[j2] = d1-1-i;
                                d -= diziyukari[j2];
                                sayac3++;
                            }
                        }
                    }
                
                    if(d <= 0){
                        d += diziyukari[j2];
                        diziyukari[j2] = d-1;
                        d -= diziyukari[j2];
                        System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                        sayac2 += d1-d;
                        d1 = d;
                        j2++;
                        sayac3++;
                        break;
                    }
                
                    sayac2 += d1-d;
                    d1 = d;
                    j2++;
                    if(sayac1 != 0){
                        System.out.println("Spider Robot engelden gecemeyecegi icin program sonlandirildi.");
                        break;
                    }
                }
                if("asagi".equals(yon)){
                    System.out.println("asagi kac birim ilerleyeceksiniz : ");
                    diziasagi[j3] = keyboard.nextInt();
                    d += diziasagi[j3];
                
                    for(k=0;k<2*engelSayisi;k+=2){
                        for(i=d1+1 ; i<=d ; i++){
                            if(engeller[k] == b1 && engeller[k+1] == i){
                                sayac1++;  
                                d -= diziasagi[j3];
                                diziasagi[j3] = i-d1-1;
                                d += diziasagi[j3];
                                sayac3++;
                            }    
                        }
                    }
                
                    if(d > 20){
                        d -= diziasagi[j3];
                        diziasagi[j3] = 20-d;
                        d += diziasagi[j3];
                        System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                        sayac2 += d-d1;
                        d1 = d;
                        j3++;
                        sayac3++;
                        break;
                    }
              
                    sayac2 += d-d1;
                    d1 = d;
                    j3++;
                    if(sayac1 != 0){
                        System.out.println("Spider Robot engelden gecemeyecegi icin program sonlandirildi.");
                        break;
                    }
                }
                System.out.println("hedefe ulasildi ise -1 giriniz : ");
                c = keyboard.nextInt();
            }
                
            yonSiralamasi = new String[yonSayisi];
            for(int t=0; t<yonAdlari.size(); t++) {
                yonSiralamasi[t] = yonAdlari.get(t);
            }
    }
}
    int j11, j12, j13, j14;
    @Override
    public void yukTasýnýmý() {
        j11= 0;
        j12=0;
        j13=0;
        j14=0;
        sayac11 = 0;
        c=0;
        while(c != -1 && sayac3 == 0){
            System.out.println("kolu hangi yone uzatacaksiniz  : ");
            yon = keyboard.next();
            
            yonSayisi2++;
            yonAdlari2.add(yon);
            
            
            if("sag".equals(yon)){
                System.out.println("saga kac birim uzatacaksiniz : ");
                dizisag1[j11] = keyboard.nextInt();
                b += dizisag1[j11];
                b2 += dizisag1[j11];
            
                if(b > 20){
                    b -= dizisag1[j11];
                    dizisag1[j11] = 20-b;
                    b += dizisag1[j11];
                    System.out.println("izgaradan ciktiz.Program sonlandirilacak : ");
                    sayac11 += b-b1;
                    b1 = b;
                    j11++;
                    break;
                }
                if( b2 > robotKoluUzunlugu){
                    b2 -= dizisag1[j11];
                    dizisag1[j11] = robotKoluUzunlugu-b2;
                    b2 += dizisag1[j11];
                    System.out.println("Robot kolu uzunlugunu gectiniz.Program sonlandirilacak : ");
                    sayac11 += dizisag1[j11];
                    j11++;
                    break;
                }
               
                sayac11 += b-b1;
                b1 = b;
                j11++;
            }
            if("sol".equals(yon)){
                System.out.println("sola kac birim uzatacaksiniz : ");
                dizisol1[j12] = keyboard.nextInt();
                b -= dizisol1[j12];
                b2 += dizisol1[j12];
                
                if(b <= 0){
                    b += dizisol1[j12];
                    dizisol1[j1] = b-1;
                    b -= dizisol1[j12];
                    System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                    sayac11 += b1-b;
                    b1 = b;
                    j12++;
                    break;
                }
                if( b2 > robotKoluUzunlugu){
                    b2 -= dizisol1[j12];
                    dizisol1[j12] = robotKoluUzunlugu-b2;
                    b2 += dizisol1[j12];
                    System.out.println("Robot kolu uzunlugunu gectiniz.Program sonlandirilacak : ");
                    sayac11 += dizisol1[j12];
                    j12++;
                    break;
                }
                
                sayac11 += b1-b;
                b1 = b;
                j12++;
            }
            if("yukari".equals(yon)){
                System.out.println("yukari kac birim uzatacaksiniz : ");
                diziyukari1[j13] = keyboard.nextInt();
                d -= diziyukari1[j13];
                b2 += diziyukari1[j13];
                
                if(d <= 0){
                    d += diziyukari1[j13];
                    diziyukari1[j13] = d-1;
                    d -= diziyukari1[j13];
                    System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                    sayac11 += d1-d;
                    d1 = d;
                    j13++;
                    break;
                }
                if( b2 > robotKoluUzunlugu){
                    b2 -= diziyukari1[j13];
                    diziyukari1[j13] = robotKoluUzunlugu-b2;
                    b2 += diziyukari1[j13];
                    System.out.println("Robot kolu uzunlugunu gectiniz.Program sonlandirilacak : ");
                    sayac11 += diziyukari1[j13];
                    j13++;
                    break;
                }
                sayac11 += d1-d;
                d1 = d;   
                j13++;
            }  
            if("asagi".equals(yon)){
                System.out.println("asagi kac birim uzatacaksiniz : ");
                diziasagi1[j14] = keyboard.nextInt();
                d += diziasagi1[j14];
                b2 += diziasagi1[j14];
                
                if(d > 20){
                    d -= diziasagi1[j14];
                    diziasagi1[j14] = 20-d;
                    d += diziasagi1[j14];
                    System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                    sayac11 += d-d1;
                    d1 = d;
                    j14++;
                    break;
                }
                if( b2 > robotKoluUzunlugu){
                    b2 -= diziasagi1[j14];
                    diziasagi1[j14] = robotKoluUzunlugu-b2;
                    b2 += diziasagi1[j14];
                    System.out.println("Robot kolu uzunlugunu gectiniz.Program sonlandirilacak : ");
                    sayac11 += diziasagi1[j14];
                    j14++;
                    break;
                }
                
                sayac11 += d-d1;
                d1 = d;
                j14++;
            }
            System.out.println("hedefe ulasildi ise -1 giriniz : ");
            c = keyboard.nextInt();
            
        }
                
        yonSiralamasi2 = new String[yonSayisi2];
        for(int t=0; t<yonAdlari2.size(); t++) {
            yonSiralamasi2[t] = yonAdlari2.get(t);
        }
    }
    
    public float sabitlemeSuresiniBul(int sabitlenmeSuresi){
        return this.sabitlenmeSuresi = sabitlenmeSuresi;
    }
     public float gecisSuresi(int gecisSuresi){
         return this.gecisSuresi = gecisSuresi;
     }

    @Override
    public float EngelGecmeSuresiBul() {
        if("Tekerlekli".equals(hareketli)){
            return (float) (motorSayisi * (0.5));
        }
        else if("Paletli".equals(hareketli)){
            return (motorSayisi * 3);
        }
        else
            return -1;
    }

    @Override
    public void toplamSureHesaplama() {
        if("Tekerlekli".equals(hareketli) || "Paletli".equals(hareketli)){
            a += sayac1*EngelGecmeSuresiBul();
            gezinmeSuresi = 10*sayac2/gezinmeHizi;
            a += gezinmeSuresi;
        }
        else if("Spider".equals(hareketli)){
            gezinmeSuresi = 10*sayac2/gezinmeHizi;
            a += gezinmeSuresi;
        }
        tasimaSuresi = 10*sayac11/tasimaHizi;
        a += tasimaSuresi;
        a += sabitlemeSuresiniBul(sabitlenmeSuresi);
        a += gecisSuresi(gecisSuresi);
        System.out.println(" " +a);
    }

    public String yonSir(int i) {
        return yonSiralamasi[i];
    }
    
    public String yonSir2(int i) {
        return yonSiralamasi2[i];
    }
}

public class Paletli extends GezginRobotlar{
    int paletSayisi;
    Scanner keyboard = new Scanner(System.in);
    
   String [] yonSiralamasi;
    int yonSayisi = 0;
    
    ArrayList <String> yonAdlari = new ArrayList <String> ();
    
    public Paletli(String robotTipi, int motorSayisi, int yukMiktari, float gezinmeHizi, int paletSayisi) { // tum ozelliklerin bulundugu constructor
        this.robotTipi = robotTipi;
        this.motorSayisi = motorSayisi;
        this.yukMiktari = yukMiktari;
        this.gezinmeHizi = gezinmeHizi;
        this.paletSayisi = paletSayisi;
    }

    @Override
    public void hedefeUlasildiMi(){
        j=0;
        j1=0;
        j2=0;
        j3=0;
        sayac1 = 0;
        sayac2 = 0;
        c=0;
        while(c != -1){
            System.out.println("Hangi yone ilerleyeceksiniz : ");
            yon = keyboard.next();
            
            yonSayisi++;
            yonAdlari.add(yon);
            
            
            if("sag".equals(yon)){
                System.out.println("saga kac birim ilerleyeceksiniz : ");
                dizisag[j] = keyboard.nextInt();
                b += dizisag[j];
                
                for(k=0;k<2*engelSayisi;k+=2){
                    for(i=b1+1 ; i<=b ; i++){
                        if(engeller[k] == i && engeller[k+1] == d1)
                            sayac1++;  
                    }
                }
            
                if(b > 20){
                    b -= dizisag[j];
                    dizisag[j] = 20-b;
                    b += dizisag[j];
                    System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                    sayac2 += b-b1;
                    b1 = b;
                    j++;
                    break;
                }
               
                sayac2 += b-b1;
                b1 = b;
                j++;
            }
            if("sol".equals(yon)){
                System.out.println("sola kac birim ilerleyeceksiniz : ");
                dizisol[j1] = keyboard.nextInt();
                b -= dizisol[j1];
                
                for(k=0;k<2*engelSayisi;k+=2){
                    for(i=b ; i<=b1-1 ; i++){
                        if(engeller[k] == i && engeller[k+1] == d1)
                            sayac1++;  
                    }
                }
                
                if(b <= 0){
                    b += dizisol[j1];
                    dizisol[j1] = b-1;
                    b -= dizisol[j1];
                    System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                    sayac2 += b1-b;
                    b1 = b;
                    j1++;
                    break;
                }
                
                sayac2 += b1-b;
                b1 = b;
                j1++;
            }
            if("yukari".equals(yon)){
                System.out.println("yukari kac birim ilerleyeceksiniz : ");
                diziyukari[j2] = keyboard.nextInt();
                d -= diziyukari[j2];
                
                for(k=0;k<2*engelSayisi;k+=2){
                    for(i=d ; i<=d1-1 ; i++){
                        if(engeller[k] == b1 && engeller[k+1] == i)
                            sayac1++;  
                    }
                }
                
                if(d <= 0){
                    d += diziyukari[j2];
                        diziyukari[j2] = d-1;
                        d -= diziyukari[j2];
                        System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                        sayac2 += d1-d;
                        d1 = d;
                        j2++;
                        break;
                }
                
                sayac2 += d1-d;
                d1 = d;
                j2++;
            }  
            if("asagi".equals(yon)){
                System.out.println("asagi kac birim ilerleyeceksiniz : ");
                diziasagi[j3] = keyboard.nextInt();
                d += diziasagi[j3];
                
                for(k=0;k<2*engelSayisi;k+=2){
                    for(i=d1+1 ; i<=d ; i++){
                        if(engeller[k] == b1 && engeller[k+1] == i)
                            sayac1++;  
                    }
                }
                
                if(d > 20){
                    d -= diziasagi[j3];
                    diziasagi[j3] = 20-d;
                    d += diziasagi[j3];
                    System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                    sayac2 += d-d1;
                    d1 = d;
                    j3++;
                    break;
                }
                
                sayac2 += d-d1;
                d1 = d;
                j3++;
            }
            System.out.println("hedefe ulasildi ise -1 giriniz : ");
            c = keyboard.nextInt();
            
        }
        sayac2 -=sayac1;
        
        
        yonSiralamasi = new String[yonSayisi];
        for(int t=0; t<yonAdlari.size(); t++) {
            yonSiralamasi[t] = yonAdlari.get(t);
        }
        
    }
    
    public String yonSir(int i) {
        return yonSiralamasi[i];
    }


    @Override
    public float EngelGecmeSuresiBul() {
        return (motorSayisi * 3);
    }

    @Override
    public void toplamSureHesaplama() {
        a += sayac1*EngelGecmeSuresiBul();
        gezinmeSuresi = 10*sayac2/gezinmeHizi;
        a += gezinmeSuresi;
        System.out.println(" " +a);
    }
    
     
}

public class Paralel implements ManipulatorRobotlar{
    int motorSayisi, yukMiktari,yukTasKapasite,robotKoluUzunlugu;
    float tasimaHizi,tasimaSuresi;
    String robotTipi,yon;
    Scanner keyboard = new Scanner(System.in);
    IzgaraCizimi nesne = new IzgaraCizimi();
    
    String [] yonSiralamasi;
    int yonSayisi = 0;
    ArrayList <String> yonAdlari = new ArrayList <String> ();
    int  z, t, i, j=0, j1=0, j2=0, j3=0, k=0,sayac2=0,c=0;
    float a=0;
    int b,d,b1,d1,b2;
    void robotunBaslangicNoktasý(int x,int y){
        b=x;
        b1=x;
        d=y;
        d1=y;
    }

    public Paralel(String robotTipi, int motorSayisi, int yukMiktari, int yukTasKapasite,int robotKoluUzunlugu,float tasimaHizi) { // tum ozelliklerin bulundugu constructor
        //super( robotTipi, motorSayisi, yukMiktari, gezinmeHizi, tekerlekSayisi);
        this.robotTipi = robotTipi;
        this.motorSayisi = motorSayisi;
        this.yukMiktari = yukMiktari;
        this.yukTasKapasite = yukTasKapasite;
        this.robotKoluUzunlugu = robotKoluUzunlugu;
        this.tasimaHizi = tasimaHizi;
    }
    
    @Override
    public void yukKapasitesiHesaaplama() {
        if(yukMiktari > yukTasKapasite){
            System.out.println(" yuk miktarý yuk kapasitesinden fazla. Tasiyamaz !. Yuk miktarini yeniden giriniz :");
            this.yukMiktari = keyboard.nextInt();
        }
    }
    
    @Override
    public void yukTasýnýmý() {
        j=0;
        j1=0;
        j2=0;
        j3=0;
        sayac2 = 0;
        c=0;
        while(c != -1){
            System.out.println("kolu hangi yone uzatacaksiniz : ");
            yon = keyboard.next();
            
            yonSayisi++;
            yonAdlari.add(yon);
            
            
            if("sag".equals(yon)){
                System.out.println("saga kac birim uzatacaksiniz : ");
                dizisag[j] = keyboard.nextInt();
                b += dizisag[j];
                b2 += dizisag[j];
            
                if(b > 20){
                    b -= dizisag[j];
                    dizisag[j] = 20-b;
                    b += dizisag[j];
                    System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                    sayac2 += b-b1;
                    b1 = b;
                    j++;
                    break;
                }
                if( b2 > robotKoluUzunlugu){
                    b2 -= dizisag[j];
                    dizisag[j] = robotKoluUzunlugu-b2;
                    b2 += dizisag[j];
                    System.out.println("Robot kolu uzunlugunu gectiniz.Program sonlandirilacak : ");
                    sayac2 += dizisag[j];
                    j++;
                    break;
                }
               
                sayac2 += b-b1;
                b1 = b;
                j++;
            }
            if("sol".equals(yon)){
                System.out.println("sola kac birim uzatacaksiniz : ");
                dizisol[j1] = keyboard.nextInt();
                b -= dizisol[j1];
                b2 += dizisol[j1];
                
                if(b <= 0){
                    b += dizisol[j1];
                    dizisol[j1] = b-1;
                    b -= dizisol[j1];
                    System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                    sayac2 += b1-b;
                    b1 = b;
                    j1++;
                    break;
                }
                if( b2 > robotKoluUzunlugu){
                    b2 -= dizisol[j1];
                    dizisol[j1] = robotKoluUzunlugu-b2;
                    b2 += dizisol[j1];
                    System.out.println("Robot kolu uzunlugunu gectiniz.Program sonlandirilacak : ");
                    sayac2 += dizisol[j1];
                    j1++;
                    break;
                }
                
                sayac2 += b1-b;
                b1 = b;
                j1++;
            }
            if("yukari".equals(yon)){
                System.out.println("yukari kac birim uzatacaksiniz : ");
                diziyukari[j2] = keyboard.nextInt();
                d -= diziyukari[j2];
                b2 += diziyukari[j2];
                
                if(d <= 0){
                    d += diziyukari[j2];
                    diziyukari[j2] = d-1;
                    d -= diziyukari[j2];
                    System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                    sayac2 += d1-d;
                    d1 = d;
                    j2++;
                    break;
                }
                if( b2 > robotKoluUzunlugu){
                    b2 -= diziyukari[j2];
                    diziyukari[j2] = robotKoluUzunlugu-b2;
                    b2 += diziyukari[j2];
                    System.out.println("Robot kolu uzunlugunu gectiniz.Program sonlandirilacak : ");
                    sayac2 += diziyukari[j2];
                    j2++;
                    break;
                }
                sayac2 += d1-d;
                d1 = d;   
                j2++;
            }  
            if("asagi".equals(yon)){
                System.out.println("asagi kac birim uzatacaksiniz : ");
                diziasagi[j3] = keyboard.nextInt();
                d += diziasagi[j3];
                b2 += diziasagi[j3];
                
                if(d > 20){
                    d -= diziasagi[j3];
                    diziasagi[j3] = 20-d;
                    d += diziasagi[j3];
                    System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                    sayac2 += d-d1;
                    d1 = d;
                    j3++;
                    break;
                }
                if( b2 > robotKoluUzunlugu){
                    b2 -= diziasagi[j3];
                    diziasagi[j3] = robotKoluUzunlugu-b2;
                    b2 += diziasagi[j3];
                    System.out.println("Robot kolu uzunlugunu gectiniz.Program sonlandirilacak : ");
                    sayac2 += diziasagi[j3];
                    j3++;
                    break;
                }
                
                sayac2 += d-d1;
                d1 = d;
                j3++;
            }
            System.out.println("hedefe ulasildi ise -1 giriniz : ");
            c = keyboard.nextInt();
            
        }
                
        yonSiralamasi = new String[yonSayisi];
        for(int t=0; t<yonAdlari.size(); t++) {
            yonSiralamasi[t] = yonAdlari.get(t);
        }     
    
    }
     
    public String yonSir(int i) {
        return yonSiralamasi[i];
    }

    @Override
    public void toplamSureHesaplama() {
        tasimaSuresi = 10*sayac2/tasimaHizi;
        a += tasimaSuresi;
        System.out.println("sure :  " +a);
    }
    
}

public class Seri implements ManipulatorRobotlar{
    int motorSayisi, yukMiktari,yukTasKapasite,robotKoluUzunlugu;
    float tasimaHizi,tasimaSuresi;
    String robotTipi,yon;
    Scanner keyboard = new Scanner(System.in);
    
    IzgaraCizimi nesne = new IzgaraCizimi();
    
    String [] yonSiralamasi;
    ArrayList <String> yonAdlari = new ArrayList <String> ();
    int  z, t, i, j=0, j1=0, j2=0, j3=0, k=0,sayac2=0,c=0;
    float a=0;
    int b,d,b1,d1,b2;
    
    int yonSayisi = 0;
    
    
    void robotunBaslangicNoktasý(int x,int y){
        b=x;
        b1=x;
        d=y;
        d1=y;
    }
    
    public Seri(String robotTipi, int motorSayisi, int yukMiktari, int yukTasKapasite,float tasimaHizi,int robotKoluUzunlugu) { // tum ozelliklerin bulundugu constructor
        //super( robotTipi, motorSayisi, yukMiktari, gezinmeHizi, tekerlekSayisi);
        this.robotTipi = robotTipi;
        this.motorSayisi = motorSayisi;
        this.yukMiktari = yukMiktari;
        this.yukTasKapasite = yukTasKapasite;
        this.tasimaHizi = tasimaHizi;
        this.robotKoluUzunlugu = robotKoluUzunlugu;
    }
    
    @Override
    public void yukKapasitesiHesaaplama() {
        if(yukMiktari > yukTasKapasite){
            System.out.println(" yuk miktarý yuk kapasitesinden fazla. Tasiyamaz !. Yuk miktarini yeniden giriniz :");
            this.yukMiktari = keyboard.nextInt();
        }
    }
    
    @Override
    public void yukTasýnýmý() {
        j=0;
        j1=0;
        j2=0;
        j3=0;
        sayac2 = 0;
        c=0;
        while(c != -1){
            System.out.println("kolu hangi yone uzatacaksiniz  : ");
            yon = keyboard.next();
            
            yonSayisi++;
            yonAdlari.add(yon);
            
            
            if("sag".equals(yon)){
                System.out.println("saga kac birim uzatacaksiniz : ");
                dizisag[j] = keyboard.nextInt();
                b += dizisag[j];
                b2 += dizisag[j];
            
                if(b > 20){
                    b -= dizisag[j];
                    dizisag[j] = 20-b;
                    b += dizisag[j];
                    System.out.println("ýzgaradan ciktiniz.Program sonlandirilacak : ");
                    sayac2 += b-b1;
                    b1 = b;
                    j++;
                    break;
                }
                if( b2 > robotKoluUzunlugu){
                    b2 -= dizisag[j];
                    dizisag[j] = robotKoluUzunlugu-b2;
                    b2 += dizisag[j];
                    System.out.println("Robot kolu uzunlugunu gectiniz.Program sonlandirilacak : ");
                    sayac2 += dizisag[j];
                    j++;
                    break;
                }
               
                sayac2 += b-b1;
                b1 = b;
                j++;
            }
            if("sol".equals(yon)){
                System.out.println("sola kac birim uzatacaksiniz : ");
                dizisol[j1] = keyboard.nextInt();
                b -= dizisol[j1];
                b2 += dizisol[j1];
                
                if(b <= 0){
                    b += dizisol[j1];
                    dizisol[j1] = b-1;
                    b -= dizisol[j1];
                    System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                    sayac2 += b1-b;
                    b1 = b;
                    j1++;
                    break;
                }
                if( b2 > robotKoluUzunlugu){
                    b2 -= dizisol[j1];
                    dizisol[j1] = robotKoluUzunlugu-b2;
                    b2 += dizisol[j1];
                    System.out.println("Robot kolu uzunlugunu gectiniz.Program sonlandirilacak : ");
                    sayac2 += dizisol[j1];
                    j1++;
                    break;
                }
                
                sayac2 += b1-b;
                b1 = b;
                j1++;
            }
            if("yukari".equals(yon)){
                System.out.println("yukari kac birim uzatacaksiniz : ");
                diziyukari[j2] = keyboard.nextInt();
                d -= diziyukari[j2];
                b2 += diziyukari[j2];
                
                if(d <= 0){
                    d += diziyukari[j2];
                    diziyukari[j2] = d-1;
                    d -= diziyukari[j2];
                    System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                    sayac2 += d1-d;
                    d1 = d;
                    j2++;
                    break;
                }
                if( b2 > robotKoluUzunlugu){
                    b2 -= diziyukari[j2];
                    diziyukari[j2] = robotKoluUzunlugu-b2;
                    b2 += diziyukari[j2];
                    System.out.println("Robot kolu uzunlugunu gectiniz.Program sonlandirilacak : ");
                    sayac2 += diziyukari[j2];
                    j2++;
                    break;
                }
                sayac2 += d1-d;
                d1 = d;   
                j2++;
            }  
            if("asagi".equals(yon)){
                System.out.println("asagi kac birim uzatacaksiniz : ");
                diziasagi[j3] = keyboard.nextInt();
                d += diziasagi[j3];
                b2 += diziasagi[j3];
                
                if(d > 20){
                    d -= diziasagi[j3];
                    diziasagi[j3] = 20-d;
                    d += diziasagi[j3];
                    System.out.println("ýzgaradan cýktýnýz.Program sonlandýrýlacak : ");
                    sayac2 += d-d1;
                    d1 = d;
                    j3++;
                    break;
                }
                if( b2 > robotKoluUzunlugu){
                    b2 -= diziasagi[j3];
                    diziasagi[j3] = robotKoluUzunlugu-b2;
                    b2 += diziasagi[j3];
                    System.out.println("Robot kolu uzunlugunu gectiniz.Program sonlandirilacak : ");
                    sayac2 += diziasagi[j3];
                    j3++;
                    break;
                }
                
                sayac2 += d-d1;
                d1 = d;
                j3++;
            }
            System.out.println("hedefe ulasildý ise -1 giriniz : ");
            c = keyboard.nextInt();
            
        }
        
        yonSiralamasi = new String[yonSayisi];
        for(int t=0; t<yonAdlari.size(); t++) {
            yonSiralamasi[t] = yonAdlari.get(t);
        }          
    
    }
    
    public String yonSir(int i) {
        return yonSiralamasi[i];
    }

    @Override
    public void toplamSureHesaplama() {
        tasimaSuresi = 10*sayac2/tasimaHizi;
        a += tasimaSuresi;
        System.out.println("sure :  " +a);
    }
}

public class Spider extends GezginRobotlar {
    int bacakSayisi;
    Scanner keyboard = new Scanner(System.in);
    
    String [] yonSiralamasi;
    int yonSayisi = 0;
    ArrayList <String> yonAdlari = new ArrayList <String> ();
    public Spider(String robotTipi, int motorSayisi, int yukMiktari, float gezinmeHizi, int bacakSayisi) { // tum ozelliklerin bulundugu constructor
        this.robotTipi = robotTipi;
        this.motorSayisi = motorSayisi;
        this.yukMiktari = yukMiktari;
        this.gezinmeHizi = gezinmeHizi;
        this.bacakSayisi = bacakSayisi;
    }
    
    @Override
    public void hedefeUlasildiMi() {
            j=0;
            j1=0;
            j2=0;
            j3=0;
            sayac1 = 0;
            sayac2 = 0;
           c=0;
            while(c != -1){
                System.out.println("Hangi yone ilerleyeceksiniz : ");
                yon = keyboard.next();
            
                yonSayisi++;
                yonAdlari.add(yon);
            
                if("sag".equals(yon)){
                    System.out.println("saga kac birim ilerleyeceksiniz : ");
                    dizisag[j] = keyboard.nextInt();
                    b += dizisag[j];
                
                    for(k=0;k<2*engelSayisi;k+=2){
                        for(i=b1+1 ; i<=b ; i++){
                            if(engeller[k] == i && engeller[k+1] == d1){
                                sayac1++;  
                                b -= dizisag[j];
                                dizisag[j] = i-b1-1;
                                b += dizisag[j];
                            }
                        }
                    }
            
                    if(b > 20){
                        b -= dizisag[j];
                        dizisag[j] = 20-b;
                        b += dizisag[j];
                        System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                        sayac2 += b-b1;
                        b1 = b;
                        j++;
                        break;
                    }
               
                    sayac2 += b-b1;
                    b1 = b;
                    j++;
                    if(sayac1 != 0){
                        System.out.println("Spider Robot engelden gecemeyecegi icin program sonlandirildi.");
                        break;
                    }
                }
                if("sol".equals(yon)){
                    System.out.println("sola kac birim ilerleyeceksiniz : ");
                    dizisol[j1] = keyboard.nextInt();
                    b -= dizisol[j1];
                
                    for(k=0;k<2*engelSayisi;k+=2){
                        for(i=b ; i<=b1-1 ; i++){
                            if(engeller[k] == i && engeller[k+1] == d1){
                                sayac1++;  
                                b += dizisol[j1];
                                dizisol[j1] = b1-1-i;
                                b -= dizisol[j1];
                            }
                        }
                    }
                
                    if(b <= 0){
                        b += dizisol[j1];
                        dizisol[j1] = b-1;
                        b -= dizisol[j1];
                        System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                        sayac2 += b1-b;
                        b1 = b;
                        j1++;
                        break;
                    }
                
                    sayac2 += b1-b;
                    b1 = b;
                    j1++;
                    if(sayac1 != 0){
                        System.out.println("Spider Robot engelden gecemeyecegi icin program sonlandirildi.");
                        break;
                    }
                }
                if("yukari".equals(yon)){
                    System.out.println("yukari kac birim ilerleyeceksiniz : ");
                    diziyukari[j2] = keyboard.nextInt();
                    d -= diziyukari[j2];
                
                    for(k=0;k<2*engelSayisi;k+=2){
                        for(i=d ; i<=d1-1 ; i++){
                            if(engeller[k] == b1 && engeller[k+1] == i){
                                sayac1++;  
                                d += diziyukari[j2];
                                diziyukari[j2] = d1-1-i;
                                d -= diziyukari[j2];
                            }
                        }
                    }
                
                    if(d <= 0){
                        d += diziyukari[j2];
                        diziyukari[j2] = d-1;
                        d -= diziyukari[j2];
                        System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                        sayac2 += d1-d;
                        d1 = d;
                        j2++;
                        break;
                    }
                
                    sayac2 += d1-d;
                    d1 = d;
                    j2++;
                    if(sayac1 != 0){
                        System.out.println("Spider Robot engelden gecemeyecegi icin program sonlandirildi.");
                        break;
                    }
                }
                if("asagi".equals(yon)){
                    System.out.println("asagi kac birim ilerleyeceksiniz : ");
                    diziasagi[j3] = keyboard.nextInt();
                    d += diziasagi[j3];
                
                    for(k=0;k<2*engelSayisi;k+=2){
                        for(i=d1+1 ; i<=d ; i++){
                            if(engeller[k] == b1 && engeller[k+1] == i){
                                sayac1++;  
                                d -= diziasagi[j3];
                                diziasagi[j3] = i-d1-1;
                                d += diziasagi[j3];
                            }    
                        }
                    }
                
                    if(d > 20){
                        d -= diziasagi[j3];
                        diziasagi[j3] = 20-d;
                        d += diziasagi[j3];
                        System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                        sayac2 += d-d1;
                        d1 = d;
                        j3++;
                        break;
                    }
              
                    sayac2 += d-d1;
                    d1 = d;
                    j3++;
                    if(sayac1 != 0){
                        System.out.println("Spider Robot engelden gecemeyecegi icin program sonlandirildi.");
                        break;
                    }
                }
                System.out.println("hedefe ulasildý ise -1 giriniz : ");
                c = keyboard.nextInt();
            }
        
        
            yonSiralamasi = new String[yonSayisi];
            for(int t=0; t<yonAdlari.size(); t++) {
                yonSiralamasi[t] = yonAdlari.get(t);
            }
    
    }
    
    public String yonSir(int i) {
        return yonSiralamasi[i];
    }

    @Override
    public float EngelGecmeSuresiBul() {
        return -1;
    }

    @Override
    public void toplamSureHesaplama() {
        gezinmeSuresi = 10*sayac2/gezinmeHizi;
        a += gezinmeSuresi;
        System.out.println(" " +a);
    }

}

public class Tekerlekli extends GezginRobotlar{
    Scanner keyboard = new Scanner(System.in);
    int tekerlekSayisi;
    
    String [] yonSiralamasi;
    int yonSayisi = 0;
    ArrayList <String> yonAdlari = new ArrayList <String> ();
    public Tekerlekli(String robotTipi, int motorSayisi, int yukMiktari, float gezinmeHizi, int tekerlekSayisi) { // tum ozelliklerin bulundugu constructor
        //super( robotTipi, motorSayisi, yukMiktari, gezinmeHizi, tekerlekSayisi);
        this.robotTipi = robotTipi;
        this.motorSayisi = motorSayisi;
        this.yukMiktari = yukMiktari;
        this.gezinmeHizi = gezinmeHizi;
        this.tekerlekSayisi = tekerlekSayisi;
    }
    
    @Override
    public void hedefeUlasildiMi(){
        j=0;
        j1=0;
        j2=0;
        j3=0;
        sayac1 = 0;
        sayac2 = 0;
       c=0;
        while(c != -1){
            System.out.println("Hangi yone ilerleyeceksiniz : ");
            yon = keyboard.next();
            
            yonSayisi++;
            yonAdlari.add(yon);
            
            
            if("sag".equals(yon)){
                System.out.println("saga kac birim ilerleyeceksiniz : ");
                dizisag[j] = keyboard.nextInt();
                b += dizisag[j];
                
                for(k=0;k<2*engelSayisi;k+=2){
                    for(i=b1+1 ; i<=b ; i++){
                        if(engeller[k] == i && engeller[k+1] == d1)
                            sayac1++;  
                    }
                }
            
                if(b > 20){
                    b -= dizisag[j];
                    dizisag[j] = 20-b;
                    b += dizisag[j];
                    System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                    sayac2 += b-b1;
                    b1 = b;
                    j++;
                    break;
                }
               
                sayac2 += b-b1;
                b1 = b;
                j++;
            }
            if("sol".equals(yon)){
                System.out.println("sola kac birim ilerleyeceksiniz : ");
                dizisol[j1] = keyboard.nextInt();
                b -= dizisol[j1];
                
                for(k=0;k<2*engelSayisi;k+=2){
                    for(i=b ; i<=b1-1 ; i++){
                        if(engeller[k] == i && engeller[k+1] == d1)
                            sayac1++;  
                    }
                }
                
                if(b <= 0){
                    b += dizisol[j1];
                    dizisol[j1] = b-1;
                    b -= dizisol[j1];
                    System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                    sayac2 += b1-b;
                    b1 = b;
                    j1++;
                    break;
                }
                
                sayac2 += b1-b;
                b1 = b;
                j1++;
            }
            if("yukari".equals(yon)){
                System.out.println("yukari kac birim ilerleyeceksiniz : ");
                diziyukari[j2] = keyboard.nextInt();
                d -= diziyukari[j2];
                
                for(k=0;k<2*engelSayisi;k+=2){
                    for(i=d ; i<=d1-1 ; i++){
                        if(engeller[k] == b1 && engeller[k+1] == i)
                            sayac1++;  
                    }
                }
                
                if(d <= 0){
                    d += diziyukari[j2];
                        diziyukari[j2] = d-1;
                        d -= diziyukari[j2];
                        System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                        sayac2 += d1-d;
                        d1 = d;
                        j2++;
                        break;
                }
                
                sayac2 += d1-d;
                d1 = d;
                j2++;
            }  
            if("asagi".equals(yon)){
                System.out.println("asagi kac birim ilerleyeceksiniz : ");
                diziasagi[j3] = keyboard.nextInt();
                d += diziasagi[j3];
                
                for(k=0;k<2*engelSayisi;k+=2){
                    for(i=d1+1 ; i<=d ; i++){
                        if(engeller[k] == b1 && engeller[k+1] == i)
                            sayac1++;  
                    }
                }
                
                if(d > 20){
                    d -= diziasagi[j3];
                    diziasagi[j3] = 20-d;
                    d += diziasagi[j3];
                    System.out.println("izgaradan ciktiniz.Program sonlandirilacak : ");
                    sayac2 += d-d1;
                    d1 = d;
                    j3++;
                    break;
                }
                
                sayac2 += d-d1;
                d1 = d;
                j3++;
            }
            System.out.println("hedefe ulasildi ise -1 giriniz : ");
            c = keyboard.nextInt();
            
        }
        sayac2 -=sayac1;
        
        
        yonSiralamasi = new String[yonSayisi];
        for(int t=0; t<yonAdlari.size(); t++) {
            yonSiralamasi[t] = yonAdlari.get(t);
        }
        
    }
    
    public String yonSir(int i) {
        return yonSiralamasi[i];
    }

    @Override
    public float EngelGecmeSuresiBul() {
        return (float) (motorSayisi * (0.5));
    }
    
    

    @Override
    public void toplamSureHesaplama() {
        a += sayac1*EngelGecmeSuresiBul();
        gezinmeSuresi = 10*sayac2/gezinmeHizi;
        a += gezinmeSuresi;
        System.out.println(" " +a);
    }
        
}


public class IzgaraCizimi extends JFrame{
    int sayacSag = 0, sayacSol = 0, sayacYukari = 0, sayacAsagi = 0;
       int sayacSag2 = 0, sayacSol2 = 0, sayacYukari2 = 0, sayacAsagi2 = 0;
    int flag = 1;
    int robotX, robotY;
    public int [] engeller = new int [10];
    int engelSayisi = 0;
    int i, h, f;

    int nSag, nSol, nYukari, nAsagi;
    String robotTipi = "";

    int yonSayisi;
    int yonSayisi2;
    void sayaclariSifirla() {
        sayacSag = 0;
        sayacSol = 0;
        sayacYukari = 0;
        sayacAsagi = 0;
    }
    
    void sayaclariSifirla2() {
        sayacSag2 = 0;
        sayacSol2 = 0;
        sayacYukari2 = 0;
        sayacAsagi2 = 0;
    }

    void yonSayisiniAl(int yonSayisi) {
        this.yonSayisi = yonSayisi;
    }
    void yonSayisiniAl2(int yonSayisi) {
        this.yonSayisi2 = yonSayisi;
    }
    
    String [] yonSiralamasi = new String[yonSayisi];
    String [] yonSiralamasi2 = new String[yonSayisi2];
    void robotTipiniAl(String robotTipi) {
        this.robotTipi = robotTipi;
    }
    
    
    void yonSiralamalariniAl(String[] yonSiralamasi) {
        this.yonSiralamasi = yonSiralamasi;
    }
    
    void yonSiralamalariniAl2(String[] yonSiralamasi) {
        this.yonSiralamasi2 = yonSiralamasi;
    }
    
    void robotunBaslangicNoktasi(int x,int y) {
        robotX = 50 + (x-1)*30;
        robotY = 50 + (y-1)*30;
    }
    
    void robotunSonNoktasý(int x,int y){
        h=x;
        f=y;
    }
    
    void dizilerinElemanSayisi(int nSag,int nSol,int nYukari,int nAsagi){
        this.nSag = nSag;
        this.nSol = nSol;
        this.nYukari = nYukari;
        this.nAsagi = nAsagi;
    }
    
    int nSag2, nSol2, nAsagi2, nYukari2;
    
    void dizilerinElemanSayisi2(int nSag,int nSol,int nYukari,int nAsagi){
        this.nSag2 = nSag;
        this.nSol2 = nSol;
        this.nYukari2 = nYukari;
        this.nAsagi2 = nAsagi;
    }
    
     public int [] sag = new int [nSag];
     public int [] sol = new int [nSol];
     public int [] yukari = new int [nYukari];
     public int [] asagi = new int [nAsagi];
    
     public int [] sag2 = new int [nSag2];
     public int [] sol2 = new int [nSol2];
     public int [] yukari2 = new int [nYukari2];
     public int [] asagi2 = new int [nAsagi2];
     
    void ilerleyisYonBirimleri(int [] dizi1,int [] dizi2,int [] dizi3,int [] dizi4){
        sag = dizi1;
        sol = dizi2;
        yukari = dizi3;
        asagi = dizi4;
    }
    
    void ilerleyisYonBirimleri2(int [] dizi1,int [] dizi2,int [] dizi3,int [] dizi4){
        sag2 = dizi1;
        sol2 = dizi2;
        yukari2 = dizi3;
        asagi2 = dizi4;
    }
    
    void engelYerlestir(int engelSayisi, int[] engelKoordinatlari, int n) {
        if(engelSayisi!=0) {
            for(int i=0; i<engelSayisi*2-1; i+=2) {
                engeller[i] = 50 + 30*(engelKoordinatlari[i]-1);
                engeller[i+1] = 50 + 30*(engelKoordinatlari[i+1]-1);
            }
        }
        
        this.engelSayisi = engelSayisi;
    }
    
    
    @Override
    public void paint(Graphics g) {
        flag = 1;

        super.paint(g);

        g.setColor(Color.black);
        g.drawRect(50, 50, 600, 600);

        for(int i=1; i<20; i++) {
            g.drawLine(50+i*30, 50, 50+i*30, 650);        
            g.drawLine(50, 50+i*30, 650, 50+i*30); 
        }
        
        while(flag != 0) {
        //gezgin Robot
            if(robotTipi.equals("Gezgin ")|| robotTipi.equals("Spider")
            || robotTipi.equals("Paletli") || robotTipi.equals("Tekerlekli") ) {
                g.setColor(Color.blue);

                g.drawRect(robotX, robotY, 20, 20); //govde
                g.fillRect(robotX, robotY, 20, 20);

                g.setColor(Color.green);
                g.drawRect(robotX+20, robotY, 7, 15); //sag kol
                g.fillRect(robotX+20, robotY, 7, 15);

                g.drawRect(robotX-7, robotY, 7, 15); //sol kol
                g.fillRect(robotX-7, robotY, 7, 15);

                g.setColor(Color.MAGENTA);
                g.drawRect(robotX, robotY+20, 8, 15); //sol bacak
                g.fillRect(robotX, robotY+20, 8, 15); //sol bacak
                g.drawRect(robotX+12, robotY+20, 8, 15); //sag bacak
                g.fillRect(robotX+12, robotY+20, 8, 15); //sag bacak


                g.setColor(Color.yellow);

                g.drawOval(robotX, robotY-15, 20, 15); //bas
                g.fillOval(robotX, robotY-15, 20, 15);

                g.setColor(Color.black);
                g.drawArc(robotX+5, robotY-12, 3, 3, 0, 360); //sol goz
                g.fillArc(robotX+5, robotY-12, 3, 3, 0, 360);

                g.drawArc(robotX+10, robotY-12, 3, 3, 0, 360); //sag goz
                g.fillArc(robotX+10, robotY-12, 3, 3, 0, 360);

                g.drawArc(robotX+8, robotY-7, 3, 3, 180, 360); //agiz

                g.drawString("Robotun ilk konumu", robotX-30, robotY+15);
        //gezgin sonu
            }
            else if(robotTipi.equals("Hibrit")) {
                g.setColor(Color.blue);

                g.drawRect(robotX, robotY, 20, 20); //govde
                g.fillRect(robotX, robotY, 20, 20);

                g.setColor(Color.green);
                g.drawRect(robotX+20, robotY, 7, 15); //sag kol
                g.fillRect(robotX+20, robotY, 7, 15);

                g.drawRect(robotX-7, robotY, 7, 15); //sol kol
                g.fillRect(robotX-7, robotY, 7, 15);

                g.setColor(Color.MAGENTA);
                g.drawRect(robotX, robotY+20, 8, 15); //sol bacak
                g.fillRect(robotX, robotY+20, 8, 15); //sol bacak
                g.drawRect(robotX+12, robotY+20, 8, 15); //sag bacak
                g.fillRect(robotX+12, robotY+20, 8, 15); //sag bacak


                g.setColor(Color.yellow);

                g.drawOval(robotX, robotY-15, 20, 15); //bas
                g.fillOval(robotX, robotY-15, 20, 15);

                g.setColor(Color.black);
                g.drawArc(robotX+5, robotY-12, 3, 3, 0, 360); //sol goz
                g.fillArc(robotX+5, robotY-12, 3, 3, 0, 360);

                g.drawArc(robotX+10, robotY-12, 3, 3, 0, 360); //sag goz
                g.fillArc(robotX+10, robotY-12, 3, 3, 0, 360);

                g.drawArc(robotX+8, robotY-7, 3, 3, 180, 360); //agiz

                g.drawString("Robotun ilk konumu", robotX-30, robotY+15);
            }
            else {
                g.setColor(Color.blue);
                g.drawRect(robotX, robotY, 20, 30); //govde
                g.fillRect(robotX, robotY, 20, 30);

                g.setColor(Color.green);
                g.drawRect(robotX+20, robotY+11, 15, 7); //sag kol
                g.fillRect(robotX+20, robotY+11, 15, 7);

                g.drawRect(robotX-15, robotY+11, 15, 7); //sol kol
                g.fillRect(robotX-15, robotY+11, 15, 7);

                g.setColor(Color.yellow);

                g.drawOval(robotX, robotY-15, 20, 15); //bas
                g.fillOval(robotX, robotY-15, 20, 15);

                g.setColor(Color.black);
                g.drawArc(robotX+5, robotY-12, 3, 3, 0, 360); //sol goz
                g.fillArc(robotX+5, robotY-12, 3, 3, 0, 360);

                g.drawArc(robotX+10, robotY-12, 3, 3, 0, 360); //sag goz
                g.fillArc(robotX+10, robotY-12, 3, 3, 0, 360);

                g.drawArc(robotX+8, robotY-7, 3, 3, 180, 360); //agiz

                g.drawString("Robotun ilk konumu", robotX-30, robotY+15);
            }
    
            if(engelSayisi != 0) {

                for(int i=0; i<engelSayisi*2-1; i+=2) {

                    g.setColor(Color.red);
                    g.drawArc(engeller[i]+5, engeller[i+1]+5, 20, 20, 0, 360);
                    g.fillArc(engeller[i]+5, engeller[i+1]+5, 20, 20, 0, 360);

                    g.setColor(Color.black);
                    g.drawString("engel", engeller[i], engeller[i+1]+15);
                    g.setColor(Color.black);
                }

            }
            

            if(robotTipi.equals("Gezgin ")|| robotTipi.equals("Spider")
            || robotTipi.equals("Paletli") || robotTipi.equals("Tekerlekli") ) {
                

                for(int i=0; i<yonSayisi; i++) {
                    if(yonSiralamasi[i].equals("sag")) {
                        robotX += 15;
                        robotY += 15;
                        g.setColor(Color.red);
                        g.drawLine(robotX, robotY, robotX + sag[sayacSag]*30, robotY);
                        robotX += sag[sayacSag]*30;
                        sayacSag++;
                        robotX -= 15;
                        robotY -= 15;

                           /*cizim*/
                            g.setColor(Color.blue);

                             g.drawRect(robotX, robotY, 20, 20); //govde
                             g.fillRect(robotX, robotY, 20, 20);

                             g.setColor(Color.green);
                             g.drawRect(robotX+20, robotY, 7, 15); //sag kol
                             g.fillRect(robotX+20, robotY, 7, 15);

                             g.drawRect(robotX-7, robotY, 7, 15); //sol kol
                             g.fillRect(robotX-7, robotY, 7, 15);

                             g.setColor(Color.MAGENTA);
                             g.drawRect(robotX, robotY+20, 8, 15); //sol bacak
                             g.fillRect(robotX, robotY+20, 8, 15); //sol bacak
                             g.drawRect(robotX+12, robotY+20, 8, 15); //sag bacak
                             g.fillRect(robotX+12, robotY+20, 8, 15); //sag bacak


                             g.setColor(Color.yellow);

                             g.drawOval(robotX, robotY-15, 20, 15); //bas
                             g.fillOval(robotX, robotY-15, 20, 15);

                             g.setColor(Color.black);
                             g.drawArc(robotX+5, robotY-12, 3, 3, 0, 360); //sol goz
                             g.fillArc(robotX+5, robotY-12, 3, 3, 0, 360);

                             g.drawArc(robotX+10, robotY-12, 3, 3, 0, 360); //sag goz
                             g.fillArc(robotX+10, robotY-12, 3, 3, 0, 360);

                             g.drawArc(robotX+8, robotY-7, 3, 3, 180, 360); //agiz
                           /*cizimson*/
                    }
                    else if(yonSiralamasi[i].equals("asagi")) {
                        robotX += 15;
                        robotY += 15;
                        g.setColor(Color.ORANGE);
                        g.drawLine(robotX, robotY, robotX, robotY + asagi[sayacAsagi]*30);
                        robotY += asagi[sayacAsagi]*30;
                        sayacAsagi++;
                        robotX -= 15;
                        robotY -= 15;

                                               /*cizim*/
                            g.setColor(Color.blue);

                             g.drawRect(robotX, robotY, 20, 20); //govde
                             g.fillRect(robotX, robotY, 20, 20);

                             g.setColor(Color.green);
                             g.drawRect(robotX+20, robotY, 7, 15); //sag kol
                             g.fillRect(robotX+20, robotY, 7, 15);

                             g.drawRect(robotX-7, robotY, 7, 15); //sol kol
                             g.fillRect(robotX-7, robotY, 7, 15);

                             g.setColor(Color.MAGENTA);
                             g.drawRect(robotX, robotY+20, 8, 15); //sol bacak
                             g.fillRect(robotX, robotY+20, 8, 15); //sol bacak
                             g.drawRect(robotX+12, robotY+20, 8, 15); //sag bacak
                             g.fillRect(robotX+12, robotY+20, 8, 15); //sag bacak


                             g.setColor(Color.yellow);

                             g.drawOval(robotX, robotY-15, 20, 15); //bas
                             g.fillOval(robotX, robotY-15, 20, 15);

                             g.setColor(Color.black);
                             g.drawArc(robotX+5, robotY-12, 3, 3, 0, 360); //sol goz
                             g.fillArc(robotX+5, robotY-12, 3, 3, 0, 360);

                             g.drawArc(robotX+10, robotY-12, 3, 3, 0, 360); //sag goz
                             g.fillArc(robotX+10, robotY-12, 3, 3, 0, 360);

                             g.drawArc(robotX+8, robotY-7, 3, 3, 180, 360); //agiz
                           /*cizimson*/
                    }
                    else if(yonSiralamasi[i].equals("sol")){
                        robotX += 15;
                        robotY += 15;
                        g.setColor(Color.CYAN);
                        g.drawLine(robotX, robotY, robotX - sol[sayacSol]*30, robotY);
                        robotX -= sol[sayacSol]*30;
                        sayacSol++;
                        robotX -= 15;
                        robotY -= 15;

                                               /*cizim*/
                            g.setColor(Color.blue);

                             g.drawRect(robotX, robotY, 20, 20); //govde
                             g.fillRect(robotX, robotY, 20, 20);

                             g.setColor(Color.green);
                             g.drawRect(robotX+20, robotY, 7, 15); //sag kol
                             g.fillRect(robotX+20, robotY, 7, 15);

                             g.drawRect(robotX-7, robotY, 7, 15); //sol kol
                             g.fillRect(robotX-7, robotY, 7, 15);

                             g.setColor(Color.MAGENTA);
                             g.drawRect(robotX, robotY+20, 8, 15); //sol bacak
                             g.fillRect(robotX, robotY+20, 8, 15); //sol bacak
                             g.drawRect(robotX+12, robotY+20, 8, 15); //sag bacak
                             g.fillRect(robotX+12, robotY+20, 8, 15); //sag bacak


                             g.setColor(Color.yellow);

                             g.drawOval(robotX, robotY-15, 20, 15); //bas
                             g.fillOval(robotX, robotY-15, 20, 15);

                             g.setColor(Color.black);
                             g.drawArc(robotX+5, robotY-12, 3, 3, 0, 360); //sol goz
                             g.fillArc(robotX+5, robotY-12, 3, 3, 0, 360);

                             g.drawArc(robotX+10, robotY-12, 3, 3, 0, 360); //sag goz
                             g.fillArc(robotX+10, robotY-12, 3, 3, 0, 360);

                             g.drawArc(robotX+8, robotY-7, 3, 3, 180, 360); //agiz
                           /*cizimson*/
                    }
                    else if(yonSiralamasi[i].equals("yukari")){
                        robotX += 15;
                        robotY += 15;
                        g.setColor(Color.GREEN);
                        g.drawLine(robotX, robotY, robotX, robotY - yukari[sayacYukari]*30);
                        robotY -= yukari[sayacYukari]*30;
                        sayacYukari++;
                        robotX -= 15;
                        robotY -= 15;

                                               /*cizim*/
                            g.setColor(Color.blue);

                             g.drawRect(robotX, robotY, 20, 20); //govde
                             g.fillRect(robotX, robotY, 20, 20);

                             g.setColor(Color.green);
                             g.drawRect(robotX+20, robotY, 7, 15); //sag kol
                             g.fillRect(robotX+20, robotY, 7, 15);

                             g.drawRect(robotX-7, robotY, 7, 15); //sol kol
                             g.fillRect(robotX-7, robotY, 7, 15);

                             g.setColor(Color.MAGENTA);
                             g.drawRect(robotX, robotY+20, 8, 15); //sol bacak
                             g.fillRect(robotX, robotY+20, 8, 15); //sol bacak
                             g.drawRect(robotX+12, robotY+20, 8, 15); //sag bacak
                             g.fillRect(robotX+12, robotY+20, 8, 15); //sag bacak


                             g.setColor(Color.yellow);

                             g.drawOval(robotX, robotY-15, 20, 15); //bas
                             g.fillOval(robotX, robotY-15, 20, 15);

                             g.setColor(Color.black);
                             g.drawArc(robotX+5, robotY-12, 3, 3, 0, 360); //sol goz
                             g.fillArc(robotX+5, robotY-12, 3, 3, 0, 360);

                             g.drawArc(robotX+10, robotY-12, 3, 3, 0, 360); //sag goz
                             g.fillArc(robotX+10, robotY-12, 3, 3, 0, 360);

                             g.drawArc(robotX+8, robotY-7, 3, 3, 180, 360); //agiz
                           /*cizimson*/
                    }
                    
                    if(i==yonSayisi-1) {
                        g.drawString("Robotun son konumu", robotX-30, robotY+15);
                    }
                }
                g.setColor(Color.black);

               
            }
            else if(robotTipi.equals("Hibrit")) {
                for(int i=0; i<yonSayisi; i++) {
                    if(yonSiralamasi[i].equals("sag")) {
                        robotX += 15;
                        robotY += 15;
                        g.setColor(Color.red);
                        g.drawLine(robotX, robotY, robotX + sag[sayacSag]*30, robotY);
                        robotX += sag[sayacSag]*30;
                        sayacSag++;
                        robotX -= 15;
                        robotY -= 15;

                           /*cizim*/
                            g.setColor(Color.blue);

                             g.drawRect(robotX, robotY, 20, 20); //govde
                             g.fillRect(robotX, robotY, 20, 20);

                             g.setColor(Color.green);
                             g.drawRect(robotX+20, robotY, 7, 15); //sag kol
                             g.fillRect(robotX+20, robotY, 7, 15);

                             g.drawRect(robotX-7, robotY, 7, 15); //sol kol
                             g.fillRect(robotX-7, robotY, 7, 15);

                             g.setColor(Color.MAGENTA);
                             g.drawRect(robotX, robotY+20, 8, 15); //sol bacak
                             g.fillRect(robotX, robotY+20, 8, 15); //sol bacak
                             g.drawRect(robotX+12, robotY+20, 8, 15); //sag bacak
                             g.fillRect(robotX+12, robotY+20, 8, 15); //sag bacak


                             g.setColor(Color.yellow);

                             g.drawOval(robotX, robotY-15, 20, 15); //bas
                             g.fillOval(robotX, robotY-15, 20, 15);

                             g.setColor(Color.black);
                             g.drawArc(robotX+5, robotY-12, 3, 3, 0, 360); //sol goz
                             g.fillArc(robotX+5, robotY-12, 3, 3, 0, 360);

                             g.drawArc(robotX+10, robotY-12, 3, 3, 0, 360); //sag goz
                             g.fillArc(robotX+10, robotY-12, 3, 3, 0, 360);

                             g.drawArc(robotX+8, robotY-7, 3, 3, 180, 360); //agiz
                           /*cizimson*/
                           
                    }
                    else if(yonSiralamasi[i].equals("asagi")) {
                        robotX += 15;
                        robotY += 15;
                        g.setColor(Color.ORANGE);
                        g.drawLine(robotX, robotY, robotX, robotY + asagi[sayacAsagi]*30);
                        robotY += asagi[sayacAsagi]*30;
                        sayacAsagi++;
                        robotX -= 15;
                        robotY -= 15;

                                               /*cizim*/
                            g.setColor(Color.blue);

                             g.drawRect(robotX, robotY, 20, 20); //govde
                             g.fillRect(robotX, robotY, 20, 20);

                             g.setColor(Color.green);
                             g.drawRect(robotX+20, robotY, 7, 15); //sag kol
                             g.fillRect(robotX+20, robotY, 7, 15);

                             g.drawRect(robotX-7, robotY, 7, 15); //sol kol
                             g.fillRect(robotX-7, robotY, 7, 15);

                             g.setColor(Color.MAGENTA);
                             g.drawRect(robotX, robotY+20, 8, 15); //sol bacak
                             g.fillRect(robotX, robotY+20, 8, 15); //sol bacak
                             g.drawRect(robotX+12, robotY+20, 8, 15); //sag bacak
                             g.fillRect(robotX+12, robotY+20, 8, 15); //sag bacak


                             g.setColor(Color.yellow);

                             g.drawOval(robotX, robotY-15, 20, 15); //bas
                             g.fillOval(robotX, robotY-15, 20, 15);

                             g.setColor(Color.black);
                             g.drawArc(robotX+5, robotY-12, 3, 3, 0, 360); //sol goz
                             g.fillArc(robotX+5, robotY-12, 3, 3, 0, 360);

                             g.drawArc(robotX+10, robotY-12, 3, 3, 0, 360); //sag goz
                             g.fillArc(robotX+10, robotY-12, 3, 3, 0, 360);

                             g.drawArc(robotX+8, robotY-7, 3, 3, 180, 360); //agiz
                           /*cizimson*/
                    }
                    else if(yonSiralamasi[i].equals("sol")){
                        robotX += 15;
                        robotY += 15;
                        g.setColor(Color.CYAN);
                        g.drawLine(robotX, robotY, robotX - sol[sayacSol]*30, robotY);
                        robotX -= sol[sayacSol]*30;
                        sayacSol++;
                        robotX -= 15;
                        robotY -= 15;

                                               /*cizim*/
                            g.setColor(Color.blue);

                             g.drawRect(robotX, robotY, 20, 20); //govde
                             g.fillRect(robotX, robotY, 20, 20);

                             g.setColor(Color.green);
                             g.drawRect(robotX+20, robotY, 7, 15); //sag kol
                             g.fillRect(robotX+20, robotY, 7, 15);

                             g.drawRect(robotX-7, robotY, 7, 15); //sol kol
                             g.fillRect(robotX-7, robotY, 7, 15);

                             g.setColor(Color.MAGENTA);
                             g.drawRect(robotX, robotY+20, 8, 15); //sol bacak
                             g.fillRect(robotX, robotY+20, 8, 15); //sol bacak
                             g.drawRect(robotX+12, robotY+20, 8, 15); //sag bacak
                             g.fillRect(robotX+12, robotY+20, 8, 15); //sag bacak


                             g.setColor(Color.yellow);

                             g.drawOval(robotX, robotY-15, 20, 15); //bas
                             g.fillOval(robotX, robotY-15, 20, 15);

                             g.setColor(Color.black);
                             g.drawArc(robotX+5, robotY-12, 3, 3, 0, 360); //sol goz
                             g.fillArc(robotX+5, robotY-12, 3, 3, 0, 360);

                             g.drawArc(robotX+10, robotY-12, 3, 3, 0, 360); //sag goz
                             g.fillArc(robotX+10, robotY-12, 3, 3, 0, 360);

                             g.drawArc(robotX+8, robotY-7, 3, 3, 180, 360); //agiz
                           /*cizimson*/
                    }
                    else if(yonSiralamasi[i].equals("yukari")){
                        robotX += 15;
                        robotY += 15;
                        g.setColor(Color.GREEN);
                        g.drawLine(robotX, robotY, robotX, robotY - yukari[sayacYukari]*30);
                        robotY -= yukari[sayacYukari]*30;
                        sayacYukari++;
                        robotX -= 15;
                        robotY -= 15;

                                               /*cizim*/
                            g.setColor(Color.blue);

                             g.drawRect(robotX, robotY, 20, 20); //govde
                             g.fillRect(robotX, robotY, 20, 20);

                             g.setColor(Color.green);
                             g.drawRect(robotX+20, robotY, 7, 15); //sag kol
                             g.fillRect(robotX+20, robotY, 7, 15);

                             g.drawRect(robotX-7, robotY, 7, 15); //sol kol
                             g.fillRect(robotX-7, robotY, 7, 15);

                             g.setColor(Color.MAGENTA);
                             g.drawRect(robotX, robotY+20, 8, 15); //sol bacak
                             g.fillRect(robotX, robotY+20, 8, 15); //sol bacak
                             g.drawRect(robotX+12, robotY+20, 8, 15); //sag bacak
                             g.fillRect(robotX+12, robotY+20, 8, 15); //sag bacak


                             g.setColor(Color.yellow);

                             g.drawOval(robotX, robotY-15, 20, 15); //bas
                             g.fillOval(robotX, robotY-15, 20, 15);

                             g.setColor(Color.black);
                             g.drawArc(robotX+5, robotY-12, 3, 3, 0, 360); //sol goz
                             g.fillArc(robotX+5, robotY-12, 3, 3, 0, 360);

                             g.drawArc(robotX+10, robotY-12, 3, 3, 0, 360); //sag goz
                             g.fillArc(robotX+10, robotY-12, 3, 3, 0, 360);

                             g.drawArc(robotX+8, robotY-7, 3, 3, 180, 360); //agiz
                           /*cizimson*/
                    }
                    
                    if(i==yonSayisi-1) {
                        g.drawString("Robotun son konumu", robotX-30, robotY+15);
                    }
                 
                }
                g.setColor(Color.black);
                
                ////gezgin kisim bitti, manipulator kismi basladi
                //****************************************************************
                
                robotX +=15;
                robotY += 11;
                if(sag2.length>sol2.length) {
                    //use sag kol
                   
                    
                    g.setColor(Color.green);

                    for(int i=0; i<yonSayisi2; i++) {
                    if(yonSiralamasi2[i].equals("sag")) {
                        g.setColor(Color.green);
                        
                        g.drawRect(robotX+20, robotY, sag2[sayacSag2]*30-20, 7);
                        g.fillRect(robotX+20, robotY, sag2[sayacSag2]*30-20, 7);
                        robotX += sag2[sayacSag2]*30;
                        sayacSag2++;
                    }
                    else if(yonSiralamasi2[i].equals("asagi")) {
                        g.setColor(Color.green);
                        
                        g.drawRect(robotX, robotY, 7, asagi2[sayacAsagi2]*30);
                        g.fillRect(robotX, robotY, 7, asagi2[sayacAsagi2]*30);
                        robotY += asagi2[sayacAsagi2]*30;
                        sayacAsagi2++;
                       
                    }
                    else if(yonSiralamasi2[i].equals("sol")){
                        g.setColor(Color.green);
                        
                        g.drawRect(robotX-sol2[sayacSol2]*30, robotY, sol2[sayacSol2]*30+20, 7);
                        g.fillRect(robotX-sol2[sayacSol2]*30, robotY, sol2[sayacSol2]*30+20, 7);
                        robotX -= sol2[sayacSol2]*30;
                        sayacSol2++;
                        
                    }
                    else if(yonSiralamasi2[i].equals("yukari")){
                        g.setColor(Color.green);
                        
                        g.drawRect(robotX, robotY-yukari2[sayacYukari2]*30, 7, yukari2[sayacYukari2]*30);
                        g.fillRect(robotX, robotY-yukari2[sayacYukari2]*30, 7, yukari2[sayacYukari2]*30);
                        robotY -= yukari2[sayacYukari2]*30; 
                        sayacYukari2++;
                        
                    }
                    if(i==yonSayisi2-1) {
                        
                        
                        g.setColor(Color.pink);
                        g.drawArc(robotX-10, robotY-5, 20, 20, 0, 360);
                        g.fillArc(robotX-10, robotY-5, 20, 20, 0, 360);
                        g.setColor(Color.black);
                        g.drawString("Yukun son konumu", robotX-30, robotY+15);
                    }
                }

                    g.setColor(Color.black);
                    
                    
                }
                else{

                     //use sol kol 
                     g.setColor(Color.green);


                     for(int i=0; i<yonSayisi2; i++) {

                        if(yonSiralamasi2[i].equals("sag")) {
                            g.setColor(Color.green);
                            
                            g.drawRect(robotX, robotY, sag2[sayacSag2]*30, 7);
                            g.fillRect(robotX, robotY, sag2[sayacSag2]*30, 7);
                            robotX += sag2[sayacSag2]*30;
                            sayacSag2++;
                            
                            
                        }
                        else if(yonSiralamasi2[i].equals("asagi")) {
                            g.setColor(Color.green);
                            
                            g.drawRect(robotX, robotY, 7, asagi2[sayacAsagi2]*30);
                            g.fillRect(robotX, robotY, 7, asagi2[sayacAsagi2]*30);
                            robotY += asagi2[sayacAsagi2]*30;
                            sayacAsagi2++;
                            
                            
                        }
                        else if(yonSiralamasi2[i].equals("sol")){
                            g.setColor(Color.green);
                            
                            g.drawRect(robotX-sol2[sayacSol2]*30, robotY, sol2[sayacSol2]*30, 7);
                            g.fillRect(robotX-sol2[sayacSol2]*30, robotY, sol2[sayacSol2]*30, 7);
                            robotX -= sol2[sayacSol2]*30;
                            sayacSol2++;
                            
                        }
                        else if(yonSiralamasi2[i].equals("yukari")){
                            g.setColor(Color.green);
                           
                            g.drawRect(robotX, robotY-yukari2[sayacYukari2]*30, 7, yukari2[sayacYukari2]*30);
                            g.fillRect(robotX, robotY-yukari2[sayacYukari2]*30, 7, yukari2[sayacYukari2]*30);
                            robotY -= yukari2[sayacYukari2]*30; 
                            sayacYukari2++;
                            
                        }
                        if(i==yonSayisi2-1) {
                            
                            g.setColor(Color.pink);
                            g.drawArc(robotX-10, robotY-5, 20, 20, 0, 360);
                            g.fillArc(robotX-10, robotY-5, 20, 20, 0, 360);
                            g.setColor(Color.black);
                            g.drawString("Yukun son konumu", robotX-30, robotY+15);
                        }
                    }
  
                    g.setColor(Color.black);

                }
                
                /****/

            }
            
            else {
                robotX +=15;
                robotY += 11;
                if(sag.length>sol.length) {
                    //use sag kol
                   
                    
                    g.setColor(Color.green);

                    for(int i=0; i<yonSayisi; i++) {
                    if(yonSiralamasi[i].equals("sag")) {
                        g.setColor(Color.green);
                        
                        g.drawRect(robotX+20, robotY, sag[sayacSag]*30-20, 7);
                        g.fillRect(robotX+20, robotY, sag[sayacSag]*30-20, 7);
                        robotX += sag[sayacSag]*30;
                        sayacSag++;
                    }
                    else if(yonSiralamasi[i].equals("asagi")) {
                        g.setColor(Color.green);
                        
                        g.drawRect(robotX, robotY, 7, asagi[sayacAsagi]*30);
                        g.fillRect(robotX, robotY, 7, asagi[sayacAsagi]*30);
                        robotY += asagi[sayacAsagi]*30;
                        sayacAsagi++;
                       
                    }
                    else if(yonSiralamasi[i].equals("sol")){
                        g.setColor(Color.green);
                        
                        g.drawRect(robotX-sol[sayacSol]*30, robotY, sol[sayacSol]*30+20, 7);
                        g.fillRect(robotX-sol[sayacSol]*30, robotY, sol[sayacSol]*30+20, 7);
                        robotX -= sol[sayacSol]*30;
                        sayacSol++;
                        
                    }
                    else if(yonSiralamasi[i].equals("yukari")){
                        g.setColor(Color.green);
                        
                        g.drawRect(robotX, robotY-yukari[sayacYukari]*30, 7, yukari[sayacYukari]*30);
                        g.fillRect(robotX, robotY-yukari[sayacYukari]*30, 7, yukari[sayacYukari]*30);
                        robotY -= yukari[sayacYukari]*30; 
                        sayacYukari++;
                        
                    }
                    if(i==yonSayisi-1) {
                        
                        
                        g.setColor(Color.pink);
                        g.drawArc(robotX-10, robotY-5, 20, 20, 0, 360);
                        g.fillArc(robotX-10, robotY-5, 20, 20, 0, 360);
                        g.setColor(Color.black);
                        g.drawString("Yukun son konumu", robotX-30, robotY+15);
                    }
                }

                    g.setColor(Color.black);
                    
                    
                }
                else{

                    
                     //use sol kol 
                     g.setColor(Color.green);


                     for(int i=0; i<yonSayisi; i++) {

                        if(yonSiralamasi[i].equals("sag")) {
                            g.setColor(Color.green);
                            
                            g.drawRect(robotX, robotY, sag[sayacSag]*30, 7);
                            g.fillRect(robotX, robotY, sag[sayacSag]*30, 7);
                            robotX += sag[sayacSag]*30;
                            sayacSag++;
                            
                            
                        }
                        else if(yonSiralamasi[i].equals("asagi")) {
                            g.setColor(Color.green);
                            
                            g.drawRect(robotX, robotY, 7, asagi[sayacAsagi]*30);
                            g.fillRect(robotX, robotY, 7, asagi[sayacAsagi]*30);
                            robotY += asagi[sayacAsagi]*30;
                            sayacAsagi++;
                            
                            
                        }
                        else if(yonSiralamasi[i].equals("sol")){
                            g.setColor(Color.green);
                            
                            g.drawRect(robotX-sol[sayacSol]*30, robotY, sol[sayacSol]*30, 7);
                            g.fillRect(robotX-sol[sayacSol]*30, robotY, sol[sayacSol]*30, 7);
                            robotX -= sol[sayacSol]*30;
                            sayacSol++;
                            
                        }
                        else if(yonSiralamasi[i].equals("yukari")){
                            g.setColor(Color.green);
                           
                            g.drawRect(robotX, robotY-yukari[sayacYukari]*30, 7, yukari[sayacYukari]*30);
                            g.fillRect(robotX, robotY-yukari[sayacYukari]*30, 7, yukari[sayacYukari]*30);
                            robotY -= yukari[sayacYukari]*30; 
                            sayacYukari++;
                            
                        }
                        if(i==yonSayisi-1) {
                            
                            g.setColor(Color.pink);
                            g.drawArc(robotX-10, robotY-5, 20, 20, 0, 360);
                            g.fillArc(robotX-10, robotY-5, 20, 20, 0, 360);
                            g.setColor(Color.black);
                            g.drawString("Yukun son konumu", robotX-30, robotY+15);
                        }
                    }
  
                    g.setColor(Color.black);
                    
                    
                    
                }
            }
            flag = 0;
        }
    }
    
}

public class RobotProjesi {
    
    public static void main(String[] args) {
        int paralelMinHiz = 20;
        int seriMinHiZ = 10;
        int paralelTasimaHizi = 0;
        int seriTasimaHizi = 0;
        int paralelTasimaKapasitesiMin = 20;
        int seriTasimaKapasitesiMin = 10;
        int paralelTasimaKapasitesi = 0;
        int seriTasimaKapasitesi = 0;
        int paralelMotorSayisi = 0;
        int seriMotorSayisi = 0;
        int paralelYukMiktari = 0;
        int seriYukMiktari = 0;
        int paralelRobotKolu = 0;
        int seriRobotKolu = 0;

        int tekerlekliMinHiz = 20;
        int paletliMinHiz = 10;
        int spiderMinHiz = 5;
        int tekerlekliMotorSayisi = 0;
        int paletliMotorSayisi = 0;
        int spiderMotorSayisi = 0;
        int tekerlekliYukMiktari = 0;
        int paletliYukMiktari = 0;
        int spiderYukMiktari = 0;
        int tekerlekliGezinmeHizi = 0;
        int paletliGezinmeHizi = 0;
        int spiderGezinmeHizi = 0;
        int tekerlekSayisi = 0;
        int paletSayisi = 0;
        int bacakSayisi = 0;

        int hibritGezinmeHizi = 0;
        int hibritMotorSayisi = 0;
        int hibritYukMiktari = 0;
        int hibrittekerlekSayisi = 0;
        int hibritpaletSayisi = 0;
        int hibritbacakSayisi = 0;
        int hibritTasimaHizi = 0;
        int hibritTasimaKapasitesi = 0;
        int hibritRobotKolu = 0;
        int hibritgecisSuresi = 0;
        int hibritSabitlenmeSuresi = 0;

        String hibritli = null;
        String hibritsiz = null;
        
        Scanner keyboard = new Scanner(System.in);
        
        IzgaraCizimi frame = new IzgaraCizimi(); 
        frame.setTitle("RobotProjesi");
        frame.setSize(700,700);

        System.out.println("Kac robot girmek istiyorsunuz : ");
        int robotSayisi = keyboard.nextInt();

        int robotX,robotY;

        for(int o=0; o<robotSayisi; o++) {
            do {
                System.out.println("Robotun baslangic noktasini girin (x,y) max 20 20 olabilir: ");
                robotX = keyboard.nextInt();
                robotY = keyboard.nextInt();
            }while(robotX>20 || robotY>20);

            frame.robotunBaslangicNoktasi(robotX, robotY);

            System.out.println("Izgara uzerine engel yerlestirilecek mi? True or False");
            boolean engelYerlesecekMi = keyboard.nextBoolean();
            
            int engelSayisi;

            if(engelYerlesecekMi) {
                System.out.print("Kac engel yerlesecek? : ");
                engelSayisi = keyboard.nextInt(); 
            }
            else {
                engelSayisi = 0;
            }

           int [] koordinatlar = new int[engelSayisi*2];

            if(engelYerlesecekMi) {
                int j = 0;
                for(int i=0; i<engelSayisi; i++) {
                    int x,y;

                    System.out.println(i + ". engel " + "hangi koordinatlara yerlesecek? max 20 20 olabilir");
                    System.out.print("x : ");
                    x = keyboard.nextInt();
                    koordinatlar[j] = x;

                    while(x>20) {
                        System.out.println("x 20den buyuk olamaz. Lutfen tekrar girin.");
                        System.out.print("x : ");
                        x = keyboard.nextInt();
                        koordinatlar[j] = x;
                    }
                    j++;

                    System.out.print("y : ");
                    y = keyboard.nextInt();
                    koordinatlar[j] = y;

                    while(y>20) {
                        System.out.println("y 20den buyuk olamaz. Lutfen tekrar girin.");
                        System.out.print("y : ");
                        y = keyboard.nextInt();
                        koordinatlar[j] = y;
                    }
                    j++; 
                }

                frame.engelYerlestir(engelSayisi, koordinatlar, j);
            }
            else {
                engelSayisi = 0;

                frame.engelYerlestir(engelSayisi, koordinatlar, engelSayisi);
            }

            System.out.println("Tanimlanacak robot tipini giriniz : ");
            String robotTipi = keyboard.next();

            frame.robotTipiniAl(robotTipi);
          
            if(robotTipi.equals("Spider") || robotTipi.equals("Paletli") || robotTipi.equals("Tekerlekli")) {
                tekerlekliGezinmeHizi = 5;
                while(tekerlekliGezinmeHizi <= tekerlekliMinHiz){
                    System.out.println("Tekerlekli robot icin gezinme hizini giriniz :" );
                    tekerlekliGezinmeHizi = keyboard.nextInt();
                }
                paletliGezinmeHizi = 5;
                while(paletliGezinmeHizi <= paletliMinHiz){
                    System.out.println("Paletli robot icin gezinme kapasitesi giriniz :" );
                    paletliGezinmeHizi = keyboard.nextInt();
                }
                spiderGezinmeHizi = 3;
                while(spiderGezinmeHizi <= spiderMinHiz){
                    System.out.println("Spider robot icin gezinme kapasitesi giriniz :" );
                    spiderGezinmeHizi = keyboard.nextInt();
                }
                
                System.out.println("Tekerlekli robot icin motor sayisini giriniz : ");
                tekerlekliMotorSayisi = keyboard.nextInt();
                System.out.println("Paletli robot icin motor sayisini giriniz : ");
                paletliMotorSayisi = keyboard.nextInt();
                System.out.println("Spider robot icin motor sayisini giriniz : ");
                spiderMotorSayisi = keyboard.nextInt();
                System.out.println("Tekerlekli robot icin yuk miktari giriniz : ");
                tekerlekliYukMiktari = keyboard.nextInt();
                System.out.println("Paletli robot icin yuk miktari giriniz : ");
                paletliYukMiktari = keyboard.nextInt();
                System.out.println("Spider robot icin yuk miktari giriniz : ");
                spiderYukMiktari = keyboard.nextInt();
                System.out.println("Tekerlekli robot icin tekerlek sayisini giriniz : ");
                tekerlekSayisi = keyboard.nextInt();
                System.out.println("Paletli robot icin palet sayisini giriniz : ");
                paletSayisi = keyboard.nextInt();
                System.out.println("Spider robot icin bacak sayisini giriniz : ");
                bacakSayisi = keyboard.nextInt();
            }

            else if(robotTipi.equals("Paralel") || robotTipi.equals("Seri")){
                
                paralelTasimaHizi = 5;
                while (paralelTasimaHizi <= paralelMinHiz) {
                    System.out.println("Paralel robot icin tasima hizini giriniz :");
                    paralelTasimaHizi = keyboard.nextInt();
                }
                
                seriTasimaHizi = 5;
                while (seriTasimaHizi <= seriMinHiZ) {
                    System.out.println("Seri robot icin tasima hizini giriniz :");
                    seriTasimaHizi = keyboard.nextInt();
                }
                
                paralelTasimaKapasitesi = 5;
                while (paralelTasimaKapasitesi <= paralelTasimaKapasitesiMin) {
                    System.out.println("Paralel robot icin tasima kapasitesi giriniz :");
                    paralelTasimaKapasitesi = keyboard.nextInt();
                }
                
                seriTasimaKapasitesi = 5;
                while (seriTasimaKapasitesi <= seriTasimaKapasitesiMin) {
                    System.out.println("Seri robot icin tasima kapasitesi giriniz :");
                    seriTasimaKapasitesi = keyboard.nextInt();
                }
                
                System.out.println("Paralel robot icin motor sayisini giriniz : ");
                paralelMotorSayisi = keyboard.nextInt();
                System.out.println("Seri robot icin motor sayisini giriniz : ");
                seriMotorSayisi = keyboard.nextInt();
                System.out.println("Paralel robot icin yuk miktari giriniz : ");
                paralelYukMiktari = keyboard.nextInt();
                System.out.println("Seri robot icin yuk miktari giriniz : ");
                seriYukMiktari = keyboard.nextInt();
                System.out.println("Paralel robot icin robot kolu uzunlugunu giriniz : ");
                paralelRobotKolu = keyboard.nextInt();
                System.out.println("Seri robot icin robot kolu uzunlugunu giriniz : ");
                seriRobotKolu = keyboard.nextInt();

            }
            else if(robotTipi.equals("Hibrit")){
                System.out.println("Hibrit robot icin hareketli kisimi giriniz : ");
                hibritli = keyboard.next();
                System.out.println("Hibrit robot icin hareketsiz kisimi giriniz : ");
                hibritsiz = keyboard.next();
                System.out.println("Hibrit robot icin gezinme hizini giriniz :");
                hibritGezinmeHizi = keyboard.nextInt();
                System.out.println("Hibrit robot icin tasima hizini giriniz :");
                hibritTasimaHizi = keyboard.nextInt();
                System.out.println("Hibrit robot icin motor sayisini giriniz : ");
                hibritMotorSayisi = keyboard.nextInt();
                System.out.println("Hibrit robot icin yuk miktari giriniz : ");
                hibritYukMiktari = keyboard.nextInt();
                System.out.println("Hibrit robot icin tekerlek sayisini giriniz : ");
                hibrittekerlekSayisi = keyboard.nextInt();
                System.out.println("Hibrit robot icin palet sayisini giriniz : ");
                hibritpaletSayisi = keyboard.nextInt();
                System.out.println("Hibrit robot icin bacak sayisini giriniz : ");
                hibritbacakSayisi = keyboard.nextInt();
                System.out.println("Hibrit robot icin tasima kapasitesi giriniz :");
                hibritTasimaKapasitesi = keyboard.nextInt();
                System.out.println("Hibrit robot icin robot kolu uzunlugunu giriniz : ");
                hibritRobotKolu = keyboard.nextInt();
                System.out.println("Hibrit robot icin gecis suresi giriniz :");
                hibritgecisSuresi = keyboard.nextInt();
                System.out.println("Hibrit robot icin sabitlenme suresi giriniz : ");
                hibritSabitlenmeSuresi = keyboard.nextInt();
            }

            Tekerlekli r11 = new Tekerlekli("Tekerlekli", tekerlekliMotorSayisi,tekerlekliYukMiktari, tekerlekliGezinmeHizi, tekerlekSayisi);
            Paletli r12 = new Paletli("Paletli",paletliMotorSayisi, paletliYukMiktari, paletliGezinmeHizi, paletSayisi);
            Spider r13 = new Spider("Spider",spiderMotorSayisi, spiderYukMiktari, spiderGezinmeHizi, bacakSayisi);
            Paralel r14 = new Paralel("Paralel", paralelMotorSayisi, paralelYukMiktari, paralelTasimaKapasitesi ,paralelRobotKolu/10, paralelTasimaHizi);
            Seri r15 = new Seri("Seri", seriMotorSayisi, seriYukMiktari, seriTasimaKapasitesi, seriTasimaHizi,seriRobotKolu/10);
            GezginManipulatorRobotlar r16 = new GezginManipulatorRobotlar("GezginManipulatorRobotlar",hibritli,hibritsiz,hibritMotorSayisi,hibritYukMiktari,hibritGezinmeHizi,hibrittekerlekSayisi,hibritbacakSayisi, hibritpaletSayisi,hibritRobotKolu/10 ,hibritTasimaKapasitesi,hibritTasimaHizi);
            
            if ("Hibrit".equals(robotTipi)) {
                frame.sayaclariSifirla();
                frame.sayaclariSifirla2();
                r16.robotunBaslangicNoktasý(robotX, robotY,engelSayisi);
                r16.engelKoordinatlarý(koordinatlar);
                r16.yukKapasitesiHesaaplama();
                r16.hedefeUlasildiMi();
                r16.yukTasýnýmý();
                
                int x1,x2,x3,x4;
                x1 = r16.j;
                x2 = r16.j1;
                x3 = r16.j2;
                x4 = r16.j3;

                int x11,x12,x13,x14;
                x11 = r16.j11;
                x12 = r16.j12;
                x13 = r16.j13;
                x14 = r16.j14;
                
                int [] dizi1 = new int [x1];
                int [] dizi2 = new int [x2];
                int [] dizi3 = new int [x3];
                int [] dizi4 = new int [x4]; 
                
                int [] dizi11 = new int [x11];
                int [] dizi12 = new int [x12];
                int [] dizi13 = new int [x13];
                int [] dizi14 = new int [x14]; 

                r16.sabitlemeSuresiniBul(hibritSabitlenmeSuresi);
                r16.gecisSuresi(hibritgecisSuresi);
                r16.EngelGecmeSuresiBul();
                r16.toplamSureHesaplama();
                dizi1 =  r16.dizisag;
                dizi2 = r16.dizisol;
                dizi3 = r16.diziyukari;
                dizi4 = r16.diziasagi;
                
                dizi11 =  r16.dizisag1;
                dizi12 = r16.dizisol1;
                dizi13 = r16.diziyukari1;
                dizi14 = r16.diziasagi1;
                
                
                int yonSayisi = r16.yonSayisi;
                String [] yonSiralamalari = new String[yonSayisi];

                for(int j=0; j<yonSayisi; j++) {
                    yonSiralamalari[j] = r16.yonSir(j);
                }
                
                int yonSayisi2 = r16.yonSayisi2;
                String [] yonSiralamalari2 = new String[yonSayisi2];

                for(int j=0; j<yonSayisi2; j++) {
                    yonSiralamalari2[j] = r16.yonSir2(j);
                }
                
                frame.dizilerinElemanSayisi(x1, x2, x3, x4);
                frame.ilerleyisYonBirimleri(dizi1, dizi2, dizi3, dizi4);

                frame.yonSayisiniAl(yonSayisi);
                frame.yonSiralamalariniAl(yonSiralamalari);
                
                frame.dizilerinElemanSayisi2(x11, x12, x13, x14);
                frame.ilerleyisYonBirimleri2(dizi11, dizi12, dizi13, dizi14);

                frame.yonSayisiniAl2(yonSayisi2);
                frame.yonSiralamalariniAl2(yonSiralamalari2);
                
                for(int p=0; p<r16.yonAdlari.size(); p++) {
                    r16.yonAdlari.remove(p);
                    r16.yonSiralamasi[p] = "";
                }
                r16.yonSayisi = 0;
                
                for(int p=0; p<r16.yonAdlari2.size(); p++) {
                    r16.yonAdlari2.remove(p);
                    r16.yonSiralamasi2[p] = "";
                }
                r16.yonSayisi2 = 0;
            } 
            else if ("Tekerlekli".equals(robotTipi)) {
                frame.sayaclariSifirla();
                r11.robotunBaslangicNoktasý(robotX, robotY, engelSayisi);
                r11.engelKoordinatlarý(koordinatlar);
                r11.hedefeUlasildiMi();
                
                int x1, x2, x3, x4;
                x1 = r11.j;
                x2 = r11.j1;
                x3 = r11.j2;
                x4 = r11.j3;

                int yonSayisi = r11.yonSayisi;
                String[] yonSiralamalari = new String[yonSayisi];

                for (int j = 0; j < yonSayisi; j++) {
                    yonSiralamalari[j] = r11.yonSir(j);
                }

                int[] dizi1 = new int[x1];
                int[] dizi2 = new int[x2];
                int[] dizi3 = new int[x3];
                int[] dizi4 = new int[x4];

                r11.EngelGecmeSuresiBul();
                r11.toplamSureHesaplama();
                dizi1 = r11.dizisag;
                dizi2 = r11.dizisol;
                dizi3 = r11.diziyukari;
                dizi4 = r11.diziasagi;
                
                frame.dizilerinElemanSayisi(x1, x2, x3, x4);
                frame.ilerleyisYonBirimleri(dizi1, dizi2, dizi3, dizi4);

                frame.yonSayisiniAl(yonSayisi);
                frame.yonSiralamalariniAl(yonSiralamalari);
                
                for(int p=0; p<r11.yonAdlari.size(); p++) {
                    r11.yonAdlari.remove(p);
                    r11.yonSiralamasi[p] = "";
                }
                r11.yonSayisi = 0;
            } 
            else if ("Paletli".equals(robotTipi)) {
                frame.sayaclariSifirla();
                r12.robotunBaslangicNoktasý(robotX, robotY, engelSayisi);
                r12.engelKoordinatlarý(koordinatlar);
                r12.hedefeUlasildiMi();
                
                int x1, x2, x3, x4;
                x1 = r12.j;
                x2 = r12.j1;
                x3 = r12.j2;
                x4 = r12.j3;

                int yonSayisi = r12.yonSayisi;
                String[] yonSiralamalari = new String[yonSayisi];

                for (int j = 0; j < yonSayisi; j++) {
                    yonSiralamalari[j] = r12.yonSir(j);
                }

                int[] dizi1 = new int[x1];
                int[] dizi2 = new int[x2];
                int[] dizi3 = new int[x3];
                int[] dizi4 = new int[x4];

                r12.EngelGecmeSuresiBul();
                r12.toplamSureHesaplama();
                dizi1 = r12.dizisag;
                dizi2 = r12.dizisol;
                dizi3 = r12.diziyukari;
                dizi4 = r12.diziasagi;
                
                frame.dizilerinElemanSayisi(x1, x2, x3, x4);
                frame.ilerleyisYonBirimleri(dizi1, dizi2, dizi3, dizi4);

                frame.yonSayisiniAl(yonSayisi);
                frame.yonSiralamalariniAl(yonSiralamalari);
                
                for(int p=0; p<r12.yonAdlari.size(); p++) {
                    r12.yonAdlari.remove(p);
                    r12.yonSiralamasi[p] = "";
                }
                r12.yonSayisi = 0;
                
            }
            else if("Spider".equals(robotTipi)){
                frame.sayaclariSifirla();
                r13.robotunBaslangicNoktasý(robotX, robotY, engelSayisi);
                r13.engelKoordinatlarý(koordinatlar);
                r13.hedefeUlasildiMi();
                
                int x1, x2, x3, x4;
                x1 = r13.j;
                x2 = r13.j1;
                x3 = r13.j2;
                x4 = r13.j3;

                int yonSayisi = r13.yonSayisi;
                String[] yonSiralamalari = new String[yonSayisi];

                for (int j = 0; j < yonSayisi; j++) {
                    yonSiralamalari[j] = r13.yonSir(j);
                }

                int[] dizi1 = new int[x1];
                int[] dizi2 = new int[x2];
                int[] dizi3 = new int[x3];
                int[] dizi4 = new int[x4];

                r13.EngelGecmeSuresiBul();
                r13.toplamSureHesaplama();
                dizi1 = r13.dizisag;
                dizi2 = r13.dizisol;
                dizi3 = r13.diziyukari;
                dizi4 = r13.diziasagi;
                
                frame.dizilerinElemanSayisi(x1, x2, x3, x4);
                frame.ilerleyisYonBirimleri(dizi1, dizi2, dizi3, dizi4);

                frame.yonSayisiniAl(yonSayisi);
                frame.yonSiralamalariniAl(yonSiralamalari);
                
                r13.yonSayisi = 0;
                for(int p=0; p<r13.yonAdlari.size(); p++) {
                    r13.yonAdlari.remove(p);
                    r13.yonSiralamasi[p] = "";
                }
               
            }
            else if ("Paralel".equals(robotTipi)) {
                frame.sayaclariSifirla();
                r14.robotunBaslangicNoktasý(robotX, robotY);
                r14.yukKapasitesiHesaaplama();
                r14.yukTasýnýmý();
                
                int x1, x2, x3, x4;
                x1 = r14.j;
                x2 = r14.j1;
                x3 = r14.j2;
                x4 = r14.j3;

                int yonSayisi = r14.yonSayisi;
                String[] yonSiralamalari = new String[yonSayisi];

                for (int j = 0; j < yonSayisi; j++) {
                    yonSiralamalari[j] = r14.yonSir(j);
                }

                int[] dizi1 = new int[x1];
                int[] dizi2 = new int[x2];
                int[] dizi3 = new int[x3];
                int[] dizi4 = new int[x4];

                r14.toplamSureHesaplama();
                dizi1 = r14.dizisag;
                dizi2 = r14.dizisol;
                dizi3 = r14.diziyukari;
                dizi4 = r14.diziasagi;
                
                frame.dizilerinElemanSayisi(x1, x2, x3, x4);
                frame.ilerleyisYonBirimleri(dizi1, dizi2, dizi3, dizi4);
                
                frame.yonSayisiniAl(yonSayisi);
                frame.yonSiralamalariniAl(yonSiralamalari);
                
                for(int p=0; p<r14.yonAdlari.size(); p++) {
                    r14.yonAdlari.remove(p);
                    r14.yonSiralamasi[p] = "";
                }
                r14.yonSayisi = 0;
            } 
            else if ("Seri".equals(robotTipi)) {
                frame.sayaclariSifirla();
                r15.robotunBaslangicNoktasý(robotX, robotY);
                r15.yukKapasitesiHesaaplama();
                r15.yukTasýnýmý();
                
                int x1, x2, x3, x4;
                x1 = r15.j;
                x2 = r15.j1;
                x3 = r15.j2;
                x4 = r15.j3;

                int yonSayisi = r15.yonSayisi;
                String[] yonSiralamalari = new String[yonSayisi];

                for (int j = 0; j < yonSayisi; j++) {
                    yonSiralamalari[j] = r15.yonSir(j);
                }

                int[] dizi1 = new int[x1];
                int[] dizi2 = new int[x2];
                int[] dizi3 = new int[x3];
                int[] dizi4 = new int[x4];

                r15.toplamSureHesaplama();
                dizi1 = r15.dizisag;
                dizi2 = r15.dizisol;
                dizi3 = r15.diziyukari;
                dizi4 = r15.diziasagi;
                
                frame.dizilerinElemanSayisi(x1, x2, x3, x4);
                frame.ilerleyisYonBirimleri(dizi1, dizi2, dizi3, dizi4);
                
                frame.yonSayisiniAl(yonSayisi);
                frame.yonSiralamalariniAl(yonSiralamalari);
                
                for(int p=0; p<r15.yonAdlari.size(); p++) {
                    r15.yonAdlari.remove(p);
                    r15.yonSiralamasi[p] = "";
                }
                r15.yonSayisi = 0;
            }

            frame.setVisible(true);
            try {
                Thread.sleep(4500);
            } catch (InterruptedException ex) {
                Logger.getLogger(IzgaraCizimi.class.getName()).log(Level.SEVERE, null, ex);
            }
            frame.setDefaultCloseOperation(EXIT_ON_CLOSE);
            frame.setVisible(false);
        }
        System.exit(0);
    }
}